{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst url = require(\"url\");\nconst util_1 = require(\"util\");\nconst BSON = require(\"../../bson\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst providers_1 = require(\"./providers\");\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  useBigInt64: false,\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  constructor() {\n    super();\n    this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n  }\n  async auth(authContext) {\n    const {\n      connection\n    } = authContext;\n    if (!authContext.credentials) {\n      throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if ('kModuleError' in deps_1.aws4) {\n      throw deps_1.aws4['kModuleError'];\n    }\n    const {\n      sign\n    } = deps_1.aws4;\n    if ((0, utils_1.maxWireVersion)(connection) < 9) {\n      throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n    }\n    if (!authContext.credentials.username) {\n      authContext.credentials = await makeTempCredentials(authContext.credentials);\n    }\n    const {\n      credentials\n    } = authContext;\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    } : accessKeyId && secretAccessKey ? {\n      accessKeyId,\n      secretAccessKey\n    } : undefined;\n    const db = credentials.source;\n    const nonce = await this.randomBytesAsync(32);\n    const saslStart = {\n      saslStart: 1,\n      mechanism: 'MONGODB-AWS',\n      payload: BSON.serialize({\n        r: nonce,\n        p: ASCII_N\n      }, bsonOptions)\n    };\n    const saslStartResponse = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n    const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n    const host = serverResponse.h;\n    const serverNonce = serverResponse.s.buffer;\n    if (serverNonce.length !== 64) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n    }\n    if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n      // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n      // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n    }\n    if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n    }\n    const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n    const options = sign({\n      method: 'POST',\n      host,\n      region: deriveRegion(serverResponse.h),\n      service: 'sts',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': body.length,\n        'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n        'X-MongoDB-GS2-CB-Flag': 'n'\n      },\n      path: '/',\n      body\n    }, awsCredentials);\n    const payload = {\n      a: options.headers.Authorization,\n      d: options.headers['X-Amz-Date']\n    };\n    if (sessionToken) {\n      payload.t = sessionToken;\n    }\n    const saslContinue = {\n      saslContinue: 1,\n      conversationId: 1,\n      payload: BSON.serialize(payload, bsonOptions)\n    };\n    await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n  }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials) {\n  function makeMongoCredentialsFromAWSTemp(creds) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n    }\n    return new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    });\n  }\n  const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n  // Check if the AWS credential provider from the SDK is present. If not,\n  // use the old method.\n  if ('kModuleError' in credentialProvider) {\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n      return makeMongoCredentialsFromAWSTemp(await request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n    }\n    // Otherwise assume we are on an EC2 instance\n    // get a token\n    const token = await request(`${AWS_EC2_URI}/latest/api/token`, {\n      method: 'PUT',\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token-ttl-seconds': 30\n      }\n    });\n    // get role name\n    const roleName = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    });\n    // get temp credentials\n    const creds = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    });\n    return makeMongoCredentialsFromAWSTemp(creds);\n  } else {\n    /*\n     * Creates a credential provider that will attempt to find credentials from the\n     * following sources (listed in order of precedence):\n     *\n     * - Environment variables exposed via process.env\n     * - SSO credentials from token cache\n     * - Web identity token credentials\n     * - Shared credentials and config ini files\n     * - The EC2/ECS Instance Metadata Service\n     */\n    const {\n      fromNodeProviderChain\n    } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    try {\n      const creds = await provider();\n      return makeMongoCredentialsFromAWSTemp({\n        AccessKeyId: creds.accessKeyId,\n        SecretAccessKey: creds.secretAccessKey,\n        Token: creds.sessionToken,\n        Expiration: creds.expiration\n      });\n    } catch (error) {\n      throw new error_1.MongoAWSError(error.message);\n    }\n  }\n}\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n  return parts[1];\n}\nasync function request(uri) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise((resolve, reject) => {\n    const requestOptions = {\n      method: 'GET',\n      timeout: 10000,\n      json: true,\n      ...url.parse(uri),\n      ...options\n    };\n    const req = http.request(requestOptions, res => {\n      res.setEncoding('utf8');\n      let data = '';\n      res.on('data', d => {\n        data += d;\n      });\n      res.once('end', () => {\n        if (options.json === false) {\n          resolve(data);\n          return;\n        }\n        try {\n          const parsed = JSON.parse(data);\n          resolve(parsed);\n        } catch {\n          // TODO(NODE-3483)\n          reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n        }\n      });\n    });\n    req.once('timeout', () => req.destroy(new error_1.MongoAWSError(`AWS request to ${uri} timed out after ${options.timeout} ms`)));\n    req.once('error', error => reject(error));\n    req.end();\n  });\n}","map":{"version":3,"names":["crypto","require","http","url","util_1","BSON","deps_1","error_1","utils_1","auth_provider_1","mongo_credentials_1","providers_1","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","bsonOptions","useBigInt64","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","MongoDBAWS","AuthProvider","constructor","randomBytesAsync","promisify","randomBytes","auth","authContext","connection","credentials","MongoMissingCredentialsError","aws4","sign","maxWireVersion","MongoCompatibilityError","username","makeTempCredentials","accessKeyId","secretAccessKey","password","sessionToken","mechanismProperties","AWS_SESSION_TOKEN","awsCredentials","undefined","db","source","nonce","saslStart","mechanism","payload","serialize","r","p","saslStartResponse","commandAsync","ns","serverResponse","deserialize","buffer","host","h","serverNonce","s","length","MongoRuntimeError","ByteUtils","equals","subarray","byteLength","indexOf","body","options","method","region","deriveRegion","service","headers","toBase64","path","a","Authorization","d","t","saslContinue","conversationId","exports","makeMongoCredentialsFromAWSTemp","creds","AccessKeyId","SecretAccessKey","Token","MongoCredentials","AuthMechanism","MONGODB_AWS","credentialProvider","getAwsCredentialProvider","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","request","token","json","roleName","fromNodeProviderChain","provider","Expiration","expiration","error","MongoAWSError","message","parts","split","uri","arguments","Promise","resolve","reject","requestOptions","timeout","parse","req","res","setEncoding","data","on","once","parsed","JSON","destroy","end"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_aws.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport * as http from 'http';\nimport * as url from 'url';\nimport { promisify } from 'util';\n\nimport type { Binary, BSONSerializeOptions } from '../../bson';\nimport * as BSON from '../../bson';\nimport { aws4, getAwsCredentialProvider } from '../../deps';\nimport {\n  MongoAWSError,\n  MongoCompatibilityError,\n  MongoMissingCredentialsError,\n  MongoRuntimeError\n} from '../../error';\nimport { ByteUtils, maxWireVersion, ns } from '../../utils';\nimport { AuthContext, AuthProvider } from './auth_provider';\nimport { MongoCredentials } from './mongo_credentials';\nimport { AuthMechanism } from './providers';\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions: BSONSerializeOptions = {\n  useBigInt64: false,\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\ninterface AWSSaslContinuePayload {\n  a: string;\n  d: string;\n  t?: string;\n}\n\nexport class MongoDBAWS extends AuthProvider {\n  randomBytesAsync: (size: number) => Promise<Buffer>;\n\n  constructor() {\n    super();\n    this.randomBytesAsync = promisify(crypto.randomBytes);\n  }\n\n  override async auth(authContext: AuthContext): Promise<void> {\n    const { connection } = authContext;\n    if (!authContext.credentials) {\n      throw new MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n\n    if ('kModuleError' in aws4) {\n      throw aws4['kModuleError'];\n    }\n    const { sign } = aws4;\n\n    if (maxWireVersion(connection) < 9) {\n      throw new MongoCompatibilityError(\n        'MONGODB-AWS authentication requires MongoDB version 4.4 or later'\n      );\n    }\n\n    if (!authContext.credentials.username) {\n      authContext.credentials = await makeTempCredentials(authContext.credentials);\n    }\n\n    const { credentials } = authContext;\n\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials =\n      accessKeyId && secretAccessKey && sessionToken\n        ? { accessKeyId, secretAccessKey, sessionToken }\n        : accessKeyId && secretAccessKey\n        ? { accessKeyId, secretAccessKey }\n        : undefined;\n\n    const db = credentials.source;\n    const nonce = await this.randomBytesAsync(32);\n\n    const saslStart = {\n      saslStart: 1,\n      mechanism: 'MONGODB-AWS',\n      payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n    };\n\n    const saslStartResponse = await connection.commandAsync(ns(`${db}.$cmd`), saslStart, undefined);\n\n    const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions) as {\n      s: Binary;\n      h: string;\n    };\n    const host = serverResponse.h;\n    const serverNonce = serverResponse.s.buffer;\n    if (serverNonce.length !== 64) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n    }\n\n    if (!ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n      // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n      // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('Server nonce does not begin with client nonce');\n    }\n\n    if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n    }\n\n    const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n    const options = sign(\n      {\n        method: 'POST',\n        host,\n        region: deriveRegion(serverResponse.h),\n        service: 'sts',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Content-Length': body.length,\n          'X-MongoDB-Server-Nonce': ByteUtils.toBase64(serverNonce),\n          'X-MongoDB-GS2-CB-Flag': 'n'\n        },\n        path: '/',\n        body\n      },\n      awsCredentials\n    );\n\n    const payload: AWSSaslContinuePayload = {\n      a: options.headers.Authorization,\n      d: options.headers['X-Amz-Date']\n    };\n\n    if (sessionToken) {\n      payload.t = sessionToken;\n    }\n\n    const saslContinue = {\n      saslContinue: 1,\n      conversationId: 1,\n      payload: BSON.serialize(payload, bsonOptions)\n    };\n\n    await connection.commandAsync(ns(`${db}.$cmd`), saslContinue, undefined);\n  }\n}\n\ninterface AWSTempCredentials {\n  AccessKeyId?: string;\n  SecretAccessKey?: string;\n  Token?: string;\n  RoleArn?: string;\n  Expiration?: Date;\n}\n\n/* @internal */\nexport interface AWSCredentials {\n  accessKeyId?: string;\n  secretAccessKey?: string;\n  sessionToken?: string;\n  expiration?: Date;\n}\n\nasync function makeTempCredentials(credentials: MongoCredentials): Promise<MongoCredentials> {\n  function makeMongoCredentialsFromAWSTemp(creds: AWSTempCredentials) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      throw new MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n    }\n\n    return new MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    });\n  }\n\n  const credentialProvider = getAwsCredentialProvider();\n\n  // Check if the AWS credential provider from the SDK is present. If not,\n  // use the old method.\n  if ('kModuleError' in credentialProvider) {\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n      return makeMongoCredentialsFromAWSTemp(\n        await request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`)\n      );\n    }\n\n    // Otherwise assume we are on an EC2 instance\n\n    // get a token\n    const token = await request(`${AWS_EC2_URI}/latest/api/token`, {\n      method: 'PUT',\n      json: false,\n      headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n    });\n\n    // get role name\n    const roleName = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: { 'X-aws-ec2-metadata-token': token }\n    });\n\n    // get temp credentials\n    const creds = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n      headers: { 'X-aws-ec2-metadata-token': token }\n    });\n\n    return makeMongoCredentialsFromAWSTemp(creds);\n  } else {\n    /*\n     * Creates a credential provider that will attempt to find credentials from the\n     * following sources (listed in order of precedence):\n     *\n     * - Environment variables exposed via process.env\n     * - SSO credentials from token cache\n     * - Web identity token credentials\n     * - Shared credentials and config ini files\n     * - The EC2/ECS Instance Metadata Service\n     */\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    try {\n      const creds = await provider();\n      return makeMongoCredentialsFromAWSTemp({\n        AccessKeyId: creds.accessKeyId,\n        SecretAccessKey: creds.secretAccessKey,\n        Token: creds.sessionToken,\n        Expiration: creds.expiration\n      });\n    } catch (error) {\n      throw new MongoAWSError(error.message);\n    }\n  }\n}\n\nfunction deriveRegion(host: string) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\ninterface RequestOptions {\n  json?: boolean;\n  method?: string;\n  timeout?: number;\n  headers?: http.OutgoingHttpHeaders;\n}\n\nasync function request(uri: string): Promise<Record<string, any>>;\nasync function request(\n  uri: string,\n  options?: { json?: true } & RequestOptions\n): Promise<Record<string, any>>;\nasync function request(uri: string, options?: { json: false } & RequestOptions): Promise<string>;\nasync function request(\n  uri: string,\n  options: RequestOptions = {}\n): Promise<string | Record<string, any>> {\n  return new Promise<string | Record<string, any>>((resolve, reject) => {\n    const requestOptions = {\n      method: 'GET',\n      timeout: 10000,\n      json: true,\n      ...url.parse(uri),\n      ...options\n    };\n\n    const req = http.request(requestOptions, res => {\n      res.setEncoding('utf8');\n\n      let data = '';\n      res.on('data', d => {\n        data += d;\n      });\n\n      res.once('end', () => {\n        if (options.json === false) {\n          resolve(data);\n          return;\n        }\n\n        try {\n          const parsed = JSON.parse(data);\n          resolve(parsed);\n        } catch {\n          // TODO(NODE-3483)\n          reject(new MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n        }\n      });\n    });\n\n    req.once('timeout', () =>\n      req.destroy(new MongoAWSError(`AWS request to ${uri} timed out after ${options.timeout} ms`))\n    );\n    req.once('error', error => reject(error));\n    req.end();\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}