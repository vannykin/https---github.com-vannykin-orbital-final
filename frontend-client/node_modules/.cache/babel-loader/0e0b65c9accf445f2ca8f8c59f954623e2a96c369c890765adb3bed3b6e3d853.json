{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-var-requires */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst utils_1 = require(\"./utils\");\nlet AutoEncrypterClass;\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n    // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n    this[kInternalClient] = null;\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n  getInternalClient(client, uri, options) {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n    if (internalClient == null) {\n      const clonedOptions = {};\n      for (const key of [...Object.getOwnPropertyNames(options), ...Object.getOwnPropertySymbols(options)]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n      clonedOptions.minPoolSize = 0;\n      internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n      for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n      client.on('newListener', (eventName, listener) => {\n        internalClient?.on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n    return internalClient;\n  }\n  async connectInternalClient() {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const internalClient = this[kInternalClient];\n    if (this.needsConnecting && internalClient != null) {\n      this.needsConnecting = false;\n      await internalClient.connect();\n    }\n  }\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n      if (internalClient != null && client !== internalClient) {\n        internalClient.close(force).then(() => callback(), error => callback(error));\n        return;\n      }\n      callback(e);\n    });\n  }\n  static checkForMongoCrypt() {\n    const mongodbClientEncryption = (0, utils_1.getMongoDBClientEncryption)();\n    if (mongodbClientEncryption == null) {\n      throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n}\nexports.Encrypter = Encrypter;","map":{"version":3,"names":["constants_1","require","error_1","mongo_client_1","utils_1","AutoEncrypterClass","kInternalClient","Symbol","Encrypter","constructor","client","uri","options","autoEncryption","MongoInvalidArgumentError","bypassAutoEncryption","needsConnecting","maxPoolSize","keyVaultClient","getInternalClient","metadataClient","undefined","proxyHost","proxyOptions","proxyPort","proxyUsername","proxyPassword","autoEncrypter","internalClient","clonedOptions","key","Object","getOwnPropertyNames","getOwnPropertySymbols","includes","Reflect","set","get","minPoolSize","MongoClient","eventName","MONGO_CLIENT_EVENTS","listener","listeners","on","connectInternalClient","connect","close","force","callback","teardown","e","then","error","checkForMongoCrypt","mongodbClientEncryption","getMongoDBClientEncryption","MongoMissingDependencyError","extension","AutoEncrypter","exports"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\encrypter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport { MONGO_CLIENT_EVENTS } from './constants';\nimport type { AutoEncrypter, AutoEncryptionOptions } from './deps';\nimport { MongoInvalidArgumentError, MongoMissingDependencyError } from './error';\nimport { MongoClient, MongoClientOptions } from './mongo_client';\nimport { Callback, getMongoDBClientEncryption } from './utils';\n\nlet AutoEncrypterClass: { new (...args: ConstructorParameters<AutoEncrypter>): AutoEncrypter };\n\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n\n/** @internal */\nexport interface EncrypterOptions {\n  autoEncryption: AutoEncryptionOptions;\n  maxPoolSize?: number;\n}\n\n/** @internal */\nexport class Encrypter {\n  [kInternalClient]: MongoClient | null;\n  bypassAutoEncryption: boolean;\n  needsConnecting: boolean;\n  autoEncrypter: AutoEncrypter;\n\n  constructor(client: MongoClient, uri: string, options: MongoClientOptions) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n    // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n    this[kInternalClient] = null;\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client: MongoClient, uri: string, options: MongoClientOptions): MongoClient {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n    if (internalClient == null) {\n      const clonedOptions: MongoClientOptions = {};\n\n      for (const key of [\n        ...Object.getOwnPropertyNames(options),\n        ...Object.getOwnPropertySymbols(options)\n      ] as string[]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n          continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n\n      internalClient = new MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n\n      for (const eventName of MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        internalClient?.on(eventName, listener);\n      });\n\n      this.needsConnecting = true;\n    }\n    return internalClient;\n  }\n\n  async connectInternalClient(): Promise<void> {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const internalClient = this[kInternalClient];\n    if (this.needsConnecting && internalClient != null) {\n      this.needsConnecting = false;\n      await internalClient.connect();\n    }\n  }\n\n  close(client: MongoClient, force: boolean, callback: Callback): void {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n      if (internalClient != null && client !== internalClient) {\n        internalClient.close(force).then(\n          () => callback(),\n          error => callback(error)\n        );\n        return;\n      }\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt(): void {\n    const mongodbClientEncryption = getMongoDBClientEncryption();\n    if (mongodbClientEncryption == null) {\n      throw new MongoMissingDependencyError(\n        'Auto-encryption requested, but the module is not installed. ' +\n          'Please add `mongodb-client-encryption` as a dependency of your project'\n      );\n    }\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n}\n"],"mappings":";;AAAA;;;;;AAEA,MAAAA,WAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,cAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AAEA,IAAII,kBAA0F;AAE9F;AACA,MAAMC,eAAe,GAAGC,MAAM,CAAC,gBAAgB,CAAC;AAQhD;AACA,MAAaC,SAAS;EAMpBC,YAAYC,MAAmB,EAAEC,GAAW,EAAEC,OAA2B;IACvE,IAAI,OAAOA,OAAO,CAACC,cAAc,KAAK,QAAQ,EAAE;MAC9C,MAAM,IAAIX,OAAA,CAAAY,yBAAyB,CAAC,2CAA2C,CAAC;;IAElF;IACA,IAAI,CAACR,eAAe,CAAC,GAAG,IAAI;IAE5B,IAAI,CAACS,oBAAoB,GAAG,CAAC,CAACH,OAAO,CAACC,cAAc,CAACE,oBAAoB;IACzE,IAAI,CAACC,eAAe,GAAG,KAAK;IAE5B,IAAIJ,OAAO,CAACK,WAAW,KAAK,CAAC,IAAIL,OAAO,CAACC,cAAc,CAACK,cAAc,IAAI,IAAI,EAAE;MAC9EN,OAAO,CAACC,cAAc,CAACK,cAAc,GAAGR,MAAM;KAC/C,MAAM,IAAIE,OAAO,CAACC,cAAc,CAACK,cAAc,IAAI,IAAI,EAAE;MACxDN,OAAO,CAACC,cAAc,CAACK,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAACT,MAAM,EAAEC,GAAG,EAAEC,OAAO,CAAC;;IAGtF,IAAI,IAAI,CAACG,oBAAoB,EAAE;MAC7BH,OAAO,CAACC,cAAc,CAACO,cAAc,GAAGC,SAAS;KAClD,MAAM,IAAIT,OAAO,CAACK,WAAW,KAAK,CAAC,EAAE;MACpCL,OAAO,CAACC,cAAc,CAACO,cAAc,GAAGV,MAAM;KAC/C,MAAM;MACLE,OAAO,CAACC,cAAc,CAACO,cAAc,GAAG,IAAI,CAACD,iBAAiB,CAACT,MAAM,EAAEC,GAAG,EAAEC,OAAO,CAAC;;IAGtF,IAAIA,OAAO,CAACU,SAAS,EAAE;MACrBV,OAAO,CAACC,cAAc,CAACU,YAAY,GAAG;QACpCD,SAAS,EAAEV,OAAO,CAACU,SAAS;QAC5BE,SAAS,EAAEZ,OAAO,CAACY,SAAS;QAC5BC,aAAa,EAAEb,OAAO,CAACa,aAAa;QACpCC,aAAa,EAAEd,OAAO,CAACc;OACxB;;IAGH,IAAI,CAACC,aAAa,GAAG,IAAItB,kBAAkB,CAACK,MAAM,EAAEE,OAAO,CAACC,cAAc,CAAC;EAC7E;EAEAM,iBAAiBA,CAACT,MAAmB,EAAEC,GAAW,EAAEC,OAA2B;IAC7E;IACA,IAAIgB,cAAc,GAAG,IAAI,CAACtB,eAAe,CAAC;IAC1C,IAAIsB,cAAc,IAAI,IAAI,EAAE;MAC1B,MAAMC,aAAa,GAAuB,EAAE;MAE5C,KAAK,MAAMC,GAAG,IAAI,CAChB,GAAGC,MAAM,CAACC,mBAAmB,CAACpB,OAAO,CAAC,EACtC,GAAGmB,MAAM,CAACE,qBAAqB,CAACrB,OAAO,CAAC,CAC7B,EAAE;QACb,IAAI,CAAC,gBAAgB,EAAE,aAAa,EAAE,SAAS,EAAE,eAAe,EAAE,QAAQ,CAAC,CAACsB,QAAQ,CAACJ,GAAG,CAAC,EACvF;QACFK,OAAO,CAACC,GAAG,CAACP,aAAa,EAAEC,GAAG,EAAEK,OAAO,CAACE,GAAG,CAACzB,OAAO,EAAEkB,GAAG,CAAC,CAAC;;MAG5DD,aAAa,CAACS,WAAW,GAAG,CAAC;MAE7BV,cAAc,GAAG,IAAIzB,cAAA,CAAAoC,WAAW,CAAC5B,GAAG,EAAEkB,aAAa,CAAC;MACpD,IAAI,CAACvB,eAAe,CAAC,GAAGsB,cAAc;MAEtC,KAAK,MAAMY,SAAS,IAAIxC,WAAA,CAAAyC,mBAAmB,EAAE;QAC3C,KAAK,MAAMC,QAAQ,IAAIhC,MAAM,CAACiC,SAAS,CAACH,SAAS,CAAC,EAAE;UAClDZ,cAAc,CAACgB,EAAE,CAACJ,SAAS,EAAEE,QAAQ,CAAC;;;MAI1ChC,MAAM,CAACkC,EAAE,CAAC,aAAa,EAAE,CAACJ,SAAS,EAAEE,QAAQ,KAAI;QAC/Cd,cAAc,EAAEgB,EAAE,CAACJ,SAAS,EAAEE,QAAQ,CAAC;MACzC,CAAC,CAAC;MAEF,IAAI,CAAC1B,eAAe,GAAG,IAAI;;IAE7B,OAAOY,cAAc;EACvB;EAEA,MAAMiB,qBAAqBA,CAAA;IACzB;IACA,MAAMjB,cAAc,GAAG,IAAI,CAACtB,eAAe,CAAC;IAC5C,IAAI,IAAI,CAACU,eAAe,IAAIY,cAAc,IAAI,IAAI,EAAE;MAClD,IAAI,CAACZ,eAAe,GAAG,KAAK;MAC5B,MAAMY,cAAc,CAACkB,OAAO,EAAE;;EAElC;EAEAC,KAAKA,CAACrC,MAAmB,EAAEsC,KAAc,EAAEC,QAAkB;IAC3D,IAAI,CAACtB,aAAa,CAACuB,QAAQ,CAAC,CAAC,CAACF,KAAK,EAAEG,CAAC,IAAG;MACvC,MAAMvB,cAAc,GAAG,IAAI,CAACtB,eAAe,CAAC;MAC5C,IAAIsB,cAAc,IAAI,IAAI,IAAIlB,MAAM,KAAKkB,cAAc,EAAE;QACvDA,cAAc,CAACmB,KAAK,CAACC,KAAK,CAAC,CAACI,IAAI,CAC9B,MAAMH,QAAQ,EAAE,EAChBI,KAAK,IAAIJ,QAAQ,CAACI,KAAK,CAAC,CACzB;QACD;;MAEFJ,QAAQ,CAACE,CAAC,CAAC;IACb,CAAC,CAAC;EACJ;EAEA,OAAOG,kBAAkBA,CAAA;IACvB,MAAMC,uBAAuB,GAAG,IAAAnD,OAAA,CAAAoD,0BAA0B,GAAE;IAC5D,IAAID,uBAAuB,IAAI,IAAI,EAAE;MACnC,MAAM,IAAIrD,OAAA,CAAAuD,2BAA2B,CACnC,8DAA8D,GAC5D,wEAAwE,CAC3E;;IAEHpD,kBAAkB,GAAGkD,uBAAuB,CAACG,SAAS,CAACzD,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC0D,aAAa;EAC/F;;AA7GFC,OAAA,CAAApD,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}