{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace) {\n    let filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n  }\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n  _initialize(session, callback) {\n    const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n      // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      }\n      // TODO: NODE-2882\n      callback(undefined, {\n        server: findOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** @internal */\n  _getMore(batchSize, callback) {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n      if (batchSize <= 0) {\n        this.close().finally(() => callback());\n        return;\n      }\n    }\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err);\n      // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n      callback(undefined, response);\n    });\n  }\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n  async count(options) {\n    (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n    if (typeof options === 'boolean') {\n      throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n    return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      ...options\n    }));\n  }\n  /** Execute the explain for the cursor */\n  async explain(verbosity) {\n    return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      explain: verbosity ?? true\n    }));\n  }\n  /** Set the cursor query */\n  filter(filter) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name, value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (name[0] !== '$') {\n      throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    }\n    // Strip of the $\n    const field = name.substr(1);\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n      case 'orderby':\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n        break;\n      case 'query':\n        this[kFilter] = value;\n        break;\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n      default:\n        throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort, direction) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n    this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse() {\n    let allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n    // As of 6.0 the default is true. This allows users to get back to the old behavior.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\nexports.FindCursor = FindCursor;","map":{"version":3,"names":["error_1","require","count_1","execute_operation_1","find_1","sort_1","utils_1","abstract_cursor_1","kFilter","Symbol","kNumReturned","kBuiltOptions","exports","FLAGS","FindCursor","AbstractCursor","constructor","client","namespace","filter","arguments","length","undefined","options","sort","formatSort","clone","clonedOptions","mergeOptions","session","map","transform","_initialize","callback","findOperation","FindOperation","cursorOptions","executeOperation","err","response","cursor","firstBatch","documents","server","_getMore","batchSize","numReturned","limit","close","finally","nextBatch","count","emitWarningOnce","MongoInvalidArgumentError","CountOperation","explain","verbosity","assertUninitialized","hint","min","max","returnKey","value","showRecordId","addQueryModifier","name","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","MongoTailableCursorError","allowDiskUse","allow","collation","skip"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\cursor\\find_cursor.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { MongoInvalidArgumentError, MongoTailableCursorError } from '../error';\nimport type { ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport type { CollationOptions } from '../operations/command';\nimport { CountOperation, CountOptions } from '../operations/count';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport { FindOperation, FindOptions } from '../operations/find';\nimport type { Hint } from '../operations/operation';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, Sort, SortDirection } from '../sort';\nimport { Callback, emitWarningOnce, mergeOptions, MongoDBNamespace } from '../utils';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\n\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n\n/** @public Flags allowed for cursor */\nexport const FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public */\nexport class FindCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kFilter]: Document;\n  /** @internal */\n  [kNumReturned]?: number;\n  /** @internal */\n  [kBuiltOptions]: FindOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    filter: Document = {},\n    options: FindOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = formatSort(options.sort);\n    }\n  }\n\n  clone(): FindCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): FindCursor<T> {\n    return super.map(transform) as FindCursor<T>;\n  }\n\n  /** @internal */\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const findOperation = new FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n      ...this.cursorOptions,\n      session\n    });\n\n    executeOperation(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n\n      // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      }\n\n      // TODO: NODE-2882\n      callback(undefined, { server: findOperation.server, session, response });\n    });\n  }\n\n  /** @internal */\n  override _getMore(batchSize: number, callback: Callback<Document>): void {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize =\n        limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        this.close().finally(() => callback());\n        return;\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err);\n\n      // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n  async count(options?: CountOptions): Promise<number> {\n    emitWarningOnce(\n      'cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead '\n    );\n    if (typeof options === 'boolean') {\n      throw new MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n    return executeOperation(\n      this.client,\n      new CountOperation(this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        ...options\n      })\n    );\n  }\n\n  /** Execute the explain for the cursor */\n  async explain(verbosity?: ExplainVerbosityLike): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new FindOperation(undefined, this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity ?? true\n      })\n    );\n  }\n\n  /** Set the cursor query */\n  filter(filter: Document): this {\n    assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint: Hint): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name: string, value: string | boolean | number | Document): this {\n    assertUninitialized(this);\n    if (name[0] !== '$') {\n      throw new MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    }\n\n    // Strip of the $\n    const field = name.substr(1);\n\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value as string | Document;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value as boolean;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value as string | Document;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value as Document;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value as number;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value as Document;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = formatSort(value as string | Document);\n        break;\n\n      case 'query':\n        this[kFilter] = value as Document;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value as boolean;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value as boolean;\n        break;\n\n      default:\n        throw new MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value: string): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  override maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>(value: Document): FindCursor<T> {\n    assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this as unknown as FindCursor<T>;\n  }\n\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort: Sort | string, direction?: SortDirection): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = formatSort(sort, direction);\n    return this;\n  }\n\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse(allow = true): this {\n    assertUninitialized(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n\n    // As of 6.0 the default is true. This allows users to get back to the old behavior.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value: CollationOptions): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}