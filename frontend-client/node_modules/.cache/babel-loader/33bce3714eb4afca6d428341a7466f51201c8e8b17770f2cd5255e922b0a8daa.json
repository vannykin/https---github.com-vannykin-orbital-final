{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkWriteOperation = void 0;\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n  constructor(collection, operations, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    };\n    // Create the bulk operation\n    const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options);\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    }\n    // Execute the bulk\n    bulk.execute({\n      ...options,\n      session\n    }).then(result => callback(undefined, result), error => callback(error));\n  }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["operation_1","require","BulkWriteOperation","AbstractOperation","constructor","collection","operations","options","execute","server","session","callback","coll","bsonOptions","readPreference","bulk","ordered","initializeUnorderedBulkOp","initializeOrderedBulkOp","i","length","raw","err","then","result","undefined","error","exports","defineAspects","Aspect","WRITE_OPERATION"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\operations\\bulk_write.ts"],"sourcesContent":["import type {\n  AnyBulkWriteOperation,\n  BulkOperationBase,\n  BulkWriteOptions,\n  BulkWriteResult\n} from '../bulk/common';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\n/** @internal */\nexport class BulkWriteOperation extends AbstractOperation<BulkWriteResult> {\n  override options: BulkWriteOptions;\n  collection: Collection;\n  operations: AnyBulkWriteOperation[];\n\n  constructor(\n    collection: Collection,\n    operations: AnyBulkWriteOperation[],\n    options: BulkWriteOptions\n  ) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<BulkWriteResult>\n  ): void {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n\n    // Create the bulk operation\n    const bulk: BulkOperationBase =\n      options.ordered === false\n        ? coll.initializeUnorderedBulkOp(options)\n        : coll.initializeOrderedBulkOp(options);\n\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    // Execute the bulk\n    bulk.execute({ ...options, session }).then(\n      result => callback(undefined, result),\n      error => callback(error)\n    );\n  }\n}\n\ndefineAspects(BulkWriteOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":";;;;;;AAUA,MAAAA,WAAA,GAAAC,OAAA;AAEA;AACA,MAAaC,kBAAmB,SAAQF,WAAA,CAAAG,iBAAkC;EAKxEC,YACEC,UAAsB,EACtBC,UAAmC,EACnCC,OAAyB;IAEzB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAESE,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAAmC;IAEnC,MAAMC,IAAI,GAAG,IAAI,CAACP,UAAU;IAC5B,MAAMC,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAMC,OAAO,GAAG;MAAE,GAAG,IAAI,CAACA,OAAO;MAAE,GAAG,IAAI,CAACM,WAAW;MAAEC,cAAc,EAAE,IAAI,CAACA;IAAc,CAAE;IAE7F;IACA,MAAMC,IAAI,GACRR,OAAO,CAACS,OAAO,KAAK,KAAK,GACrBJ,IAAI,CAACK,yBAAyB,CAACV,OAAO,CAAC,GACvCK,IAAI,CAACM,uBAAuB,CAACX,OAAO,CAAC;IAE3C;IACA,IAAI;MACF,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1CJ,IAAI,CAACM,GAAG,CAACf,UAAU,CAACa,CAAC,CAAC,CAAC;;KAE1B,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAOX,QAAQ,CAACW,GAAG,CAAC;;IAGtB;IACAP,IAAI,CAACP,OAAO,CAAC;MAAE,GAAGD,OAAO;MAAEG;IAAO,CAAE,CAAC,CAACa,IAAI,CACxCC,MAAM,IAAIb,QAAQ,CAACc,SAAS,EAAED,MAAM,CAAC,EACrCE,KAAK,IAAIf,QAAQ,CAACe,KAAK,CAAC,CACzB;EACH;;AA7CFC,OAAA,CAAAzB,kBAAA,GAAAA,kBAAA;AAgDA,IAAAF,WAAA,CAAA4B,aAAa,EAAC1B,kBAAkB,EAAE,CAACF,WAAA,CAAA6B,MAAM,CAACC,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}