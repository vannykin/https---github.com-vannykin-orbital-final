{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = require(\"util\");\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"../../constants\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\n/** @public */\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n});\nexports.uncompressibleCommands = new Set([constants_1.LEGACY_HELLO_COMMAND, 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n  const zlibOptions = {};\n  switch (options.agreedCompressor) {\n    case 'snappy':\n      if ('kModuleError' in deps_1.Snappy) {\n        throw deps_1.Snappy['kModuleError'];\n      }\n      return deps_1.Snappy.compress(dataToBeCompressed);\n    case 'zstd':\n      if ('kModuleError' in deps_1.ZStandard) {\n        throw deps_1.ZStandard['kModuleError'];\n      }\n      return deps_1.ZStandard.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n    case 'zlib':\n      if (options.zlibCompressionLevel) {\n        zlibOptions.level = options.zlibCompressionLevel;\n      }\n      return zlibDeflate(dataToBeCompressed, zlibOptions);\n    default:\n      throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n  }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n  if (compressorID !== exports.Compressor.snappy && compressorID !== exports.Compressor.zstd && compressorID !== exports.Compressor.zlib && compressorID !== exports.Compressor.none) {\n    throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n  }\n  switch (compressorID) {\n    case exports.Compressor.snappy:\n      if ('kModuleError' in deps_1.Snappy) {\n        throw deps_1.Snappy['kModuleError'];\n      }\n      return deps_1.Snappy.uncompress(compressedData, {\n        asBuffer: true\n      });\n    case exports.Compressor.zstd:\n      if ('kModuleError' in deps_1.ZStandard) {\n        throw deps_1.ZStandard['kModuleError'];\n      }\n      return deps_1.ZStandard.decompress(compressedData);\n    case exports.Compressor.zlib:\n      return zlibInflate(compressedData);\n    default:\n      return compressedData;\n  }\n}\nexports.decompress = decompress;","map":{"version":3,"names":["util_1","require","zlib","constants_1","deps_1","error_1","exports","Compressor","Object","freeze","none","snappy","zstd","uncompressibleCommands","Set","LEGACY_HELLO_COMMAND","ZSTD_COMPRESSION_LEVEL","zlibInflate","promisify","inflate","bind","zlibDeflate","deflate","compress","options","dataToBeCompressed","zlibOptions","agreedCompressor","Snappy","ZStandard","zlibCompressionLevel","level","MongoInvalidArgumentError","decompress","compressorID","compressedData","MongoDecompressionError","uncompress","asBuffer"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\cmap\\wire_protocol\\compression.ts"],"sourcesContent":["import { promisify } from 'util';\nimport * as zlib from 'zlib';\n\nimport { LEGACY_HELLO_COMMAND } from '../../constants';\nimport { Snappy, ZStandard } from '../../deps';\nimport { MongoDecompressionError, MongoInvalidArgumentError } from '../../error';\n\n/** @public */\nexport const Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n} as const);\n\n/** @public */\nexport type Compressor = (typeof Compressor)[CompressorName];\n\n/** @public */\nexport type CompressorName = keyof typeof Compressor;\n\nexport const uncompressibleCommands = new Set([\n  LEGACY_HELLO_COMMAND,\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\nconst ZSTD_COMPRESSION_LEVEL = 3;\n\nconst zlibInflate = promisify(zlib.inflate.bind(zlib));\nconst zlibDeflate = promisify(zlib.deflate.bind(zlib));\n\n// Facilitate compressing a message using an agreed compressor\nexport async function compress(\n  options: { zlibCompressionLevel: number; agreedCompressor: CompressorName },\n  dataToBeCompressed: Buffer\n): Promise<Buffer> {\n  const zlibOptions = {} as zlib.ZlibOptions;\n  switch (options.agreedCompressor) {\n    case 'snappy':\n      if ('kModuleError' in Snappy) {\n        throw Snappy['kModuleError'];\n      }\n      return Snappy.compress(dataToBeCompressed);\n\n    case 'zstd':\n      if ('kModuleError' in ZStandard) {\n        throw ZStandard['kModuleError'];\n      }\n      return ZStandard.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n\n    case 'zlib':\n      if (options.zlibCompressionLevel) {\n        zlibOptions.level = options.zlibCompressionLevel;\n      }\n      return zlibDeflate(dataToBeCompressed, zlibOptions);\n\n    default:\n      throw new MongoInvalidArgumentError(\n        `Unknown compressor ${options.agreedCompressor} failed to compress`\n      );\n  }\n}\n\n// Decompress a message using the given compressor\nexport async function decompress(compressorID: number, compressedData: Buffer): Promise<Buffer> {\n  if (\n    compressorID !== Compressor.snappy &&\n    compressorID !== Compressor.zstd &&\n    compressorID !== Compressor.zlib &&\n    compressorID !== Compressor.none\n  ) {\n    throw new MongoDecompressionError(\n      `Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`\n    );\n  }\n\n  switch (compressorID) {\n    case Compressor.snappy:\n      if ('kModuleError' in Snappy) {\n        throw Snappy['kModuleError'];\n      }\n      return Snappy.uncompress(compressedData, { asBuffer: true });\n\n    case Compressor.zstd:\n      if ('kModuleError' in ZStandard) {\n        throw ZStandard['kModuleError'];\n      }\n      return ZStandard.decompress(compressedData);\n\n    case Compressor.zlib:\n      return zlibInflate(compressedData);\n\n    default:\n      return compressedData;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}