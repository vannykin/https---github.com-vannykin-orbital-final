{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IsCappedOperation = void 0;\nconst error_1 = require(\"../error\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass IsCappedOperation extends operation_1.AbstractOperation {\n  constructor(collection, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    coll.s.db.listCollections({\n      name: coll.collectionName\n    }, {\n      ...this.options,\n      nameOnly: false,\n      readPreference: this.readPreference,\n      session\n    }).toArray().then(collections => {\n      if (collections.length === 0) {\n        // TODO(NODE-3485)\n        return callback(new error_1.MongoAPIError(`collection ${coll.namespace} not found`));\n      }\n      callback(undefined, !!collections[0].options?.capped);\n    }, error => callback(error));\n  }\n}\nexports.IsCappedOperation = IsCappedOperation;","map":{"version":3,"names":["error_1","require","operation_1","IsCappedOperation","AbstractOperation","constructor","collection","options","execute","server","session","callback","coll","s","db","listCollections","name","collectionName","nameOnly","readPreference","toArray","then","collections","length","MongoAPIError","namespace","undefined","capped","error","exports"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\operations\\is_capped.ts"],"sourcesContent":["import type { Collection } from '../collection';\nimport { MongoAPIError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { AbstractOperation, OperationOptions } from './operation';\n\n/** @internal */\nexport class IsCappedOperation extends AbstractOperation<boolean> {\n  override options: OperationOptions;\n  collection: Collection;\n\n  constructor(collection: Collection, options: OperationOptions) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<boolean>\n  ): void {\n    const coll = this.collection;\n\n    coll.s.db\n      .listCollections(\n        { name: coll.collectionName },\n        { ...this.options, nameOnly: false, readPreference: this.readPreference, session }\n      )\n      .toArray()\n      .then(\n        collections => {\n          if (collections.length === 0) {\n            // TODO(NODE-3485)\n            return callback(new MongoAPIError(`collection ${coll.namespace} not found`));\n          }\n\n          callback(undefined, !!collections[0].options?.capped);\n        },\n        error => callback(error)\n      );\n  }\n}\n"],"mappings":";;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAIA,MAAAC,WAAA,GAAAD,OAAA;AAEA;AACA,MAAaE,iBAAkB,SAAQD,WAAA,CAAAE,iBAA0B;EAI/DC,YAAYC,UAAsB,EAAEC,OAAyB;IAC3D,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,UAAU,GAAGA,UAAU;EAC9B;EAESE,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA2B;IAE3B,MAAMC,IAAI,GAAG,IAAI,CAACN,UAAU;IAE5BM,IAAI,CAACC,CAAC,CAACC,EAAE,CACNC,eAAe,CACd;MAAEC,IAAI,EAAEJ,IAAI,CAACK;IAAc,CAAE,EAC7B;MAAE,GAAG,IAAI,CAACV,OAAO;MAAEW,QAAQ,EAAE,KAAK;MAAEC,cAAc,EAAE,IAAI,CAACA,cAAc;MAAET;IAAO,CAAE,CACnF,CACAU,OAAO,EAAE,CACTC,IAAI,CACHC,WAAW,IAAG;MACZ,IAAIA,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE;QAC5B;QACA,OAAOZ,QAAQ,CAAC,IAAIX,OAAA,CAAAwB,aAAa,CAAC,cAAcZ,IAAI,CAACa,SAAS,YAAY,CAAC,CAAC;;MAG9Ed,QAAQ,CAACe,SAAS,EAAE,CAAC,CAACJ,WAAW,CAAC,CAAC,CAAC,CAACf,OAAO,EAAEoB,MAAM,CAAC;IACvD,CAAC,EACDC,KAAK,IAAIjB,QAAQ,CAACiB,KAAK,CAAC,CACzB;EACL;;AAlCFC,OAAA,CAAA1B,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}