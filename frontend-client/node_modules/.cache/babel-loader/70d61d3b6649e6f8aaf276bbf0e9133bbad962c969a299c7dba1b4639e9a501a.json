{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst WRITABLE_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.Standalone, common_1.ServerType.Mongos, common_1.ServerType.LoadBalancer]);\nconst DATA_BEARING_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.RSSecondary, common_1.ServerType.Mongos, common_1.ServerType.Standalone, common_1.ServerType.LoadBalancer]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @internal\n   *\n   * @param address - The address of the server\n   * @param hello - An optional hello response for this server\n   */\n  constructor(address, hello) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (address == null || address === '') {\n      throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n    }\n    this.address = typeof address === 'string' ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n    : address.toString();\n    this.type = parseServerType(hello, options);\n    this.hosts = hello?.hosts?.map(host => host.toLowerCase()) ?? [];\n    this.passives = hello?.passives?.map(host => host.toLowerCase()) ?? [];\n    this.arbiters = hello?.arbiters?.map(host => host.toLowerCase()) ?? [];\n    this.tags = hello?.tags ?? {};\n    this.minWireVersion = hello?.minWireVersion ?? 0;\n    this.maxWireVersion = hello?.maxWireVersion ?? 0;\n    this.roundTripTime = options?.roundTripTime ?? -1;\n    this.lastUpdateTime = (0, utils_1.now)();\n    this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n    this.error = options.error ?? null;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n    this.setName = hello?.setName ?? null;\n    this.setVersion = hello?.setVersion ?? null;\n    this.electionId = hello?.electionId ?? null;\n    this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n    this.primary = hello?.primary ?? null;\n    this.me = hello?.me?.toLowerCase() ?? null;\n    this.$clusterTime = hello?.$clusterTime ?? null;\n  }\n  get hostAddress() {\n    return utils_1.HostAddress.fromString(this.address);\n  }\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /** Is this server available for reads*/\n  get isReadable() {\n    return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n  }\n  /** Is this server data bearing */\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /** Is this server available for writes */\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   */\n  equals(other) {\n    // Despite using the comparator that would determine a nullish topologyVersion as greater than\n    // for equality we should only always perform direct equality comparison\n    const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion || compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n    const electionIdsEqual = this.electionId != null && other?.electionId != null ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0 : this.electionId === other?.electionId;\n    return other != null && (0, utils_1.errorStrictEqual)(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n  if (options?.loadBalanced) {\n    return common_1.ServerType.LoadBalancer;\n  }\n  if (!hello || !hello.ok) {\n    return common_1.ServerType.Unknown;\n  }\n  if (hello.isreplicaset) {\n    return common_1.ServerType.RSGhost;\n  }\n  if (hello.msg && hello.msg === 'isdbgrid') {\n    return common_1.ServerType.Mongos;\n  }\n  if (hello.setName) {\n    if (hello.hidden) {\n      return common_1.ServerType.RSOther;\n    } else if (hello.isWritablePrimary) {\n      return common_1.ServerType.RSPrimary;\n    } else if (hello.secondary) {\n      return common_1.ServerType.RSSecondary;\n    } else if (hello.arbiterOnly) {\n      return common_1.ServerType.RSArbiter;\n    } else {\n      return common_1.ServerType.RSOther;\n    }\n  }\n  return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n  return tagsKeys.length === tags2Keys.length && tagsKeys.every(key => tags2[key] === tags[key]);\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n  if (currentTv == null || newTv == null) {\n    return -1;\n  }\n  if (!currentTv.processId.equals(newTv.processId)) {\n    return -1;\n  }\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n  const currentCounter = bson_1.Long.isLong(currentTv.counter) ? currentTv.counter : bson_1.Long.fromNumber(currentTv.counter);\n  const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n  return currentCounter.compare(newCounter);\n}\nexports.compareTopologyVersion = compareTopologyVersion;","map":{"version":3,"names":["bson_1","require","error_1","utils_1","common_1","WRITABLE_SERVER_TYPES","Set","ServerType","RSPrimary","Standalone","Mongos","LoadBalancer","DATA_BEARING_SERVER_TYPES","RSSecondary","ServerDescription","constructor","address","hello","options","arguments","length","undefined","MongoRuntimeError","HostAddress","fromString","toString","type","parseServerType","hosts","map","host","toLowerCase","passives","arbiters","tags","minWireVersion","maxWireVersion","roundTripTime","lastUpdateTime","now","lastWriteDate","lastWrite","error","topologyVersion","setName","setVersion","electionId","logicalSessionTimeoutMinutes","primary","me","$clusterTime","hostAddress","allHosts","concat","isReadable","isWritable","isDataBearing","has","chopLength","port","slice","split","pop","Number","parseInt","equals","other","topologyVersionsEqual","compareTopologyVersion","electionIdsEqual","compareObjectId","errorStrictEqual","arrayStrictEqual","tagsStrictEqual","exports","loadBalanced","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","isWritablePrimary","secondary","arbiterOnly","RSArbiter","tags2","tagsKeys","Object","keys","tags2Keys","every","key","currentTv","newTv","processId","currentCounter","Long","isLong","counter","fromNumber","newCounter","compare"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\sdam\\server_description.ts"],"sourcesContent":["import { Document, Long, ObjectId } from '../bson';\nimport { MongoError, MongoRuntimeError, MongoServerError } from '../error';\nimport { arrayStrictEqual, compareObjectId, errorStrictEqual, HostAddress, now } from '../utils';\nimport type { ClusterTime } from './common';\nimport { ServerType } from './common';\n\nconst WRITABLE_SERVER_TYPES = new Set<ServerType>([\n  ServerType.RSPrimary,\n  ServerType.Standalone,\n  ServerType.Mongos,\n  ServerType.LoadBalancer\n]);\n\nconst DATA_BEARING_SERVER_TYPES = new Set<ServerType>([\n  ServerType.RSPrimary,\n  ServerType.RSSecondary,\n  ServerType.Mongos,\n  ServerType.Standalone,\n  ServerType.LoadBalancer\n]);\n\n/** @public */\nexport interface TopologyVersion {\n  processId: ObjectId;\n  counter: Long;\n}\n\n/** @public */\nexport type TagSet = { [key: string]: string };\n\n/** @internal */\nexport interface ServerDescriptionOptions {\n  /** An Error used for better reporting debugging */\n  error?: MongoServerError;\n\n  /** The round trip time to ping this server (in ms) */\n  roundTripTime?: number;\n\n  /** If the client is in load balancing mode. */\n  loadBalanced?: boolean;\n}\n\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nexport class ServerDescription {\n  address: string;\n  type: ServerType;\n  hosts: string[];\n  passives: string[];\n  arbiters: string[];\n  tags: TagSet;\n  error: MongoError | null;\n  topologyVersion: TopologyVersion | null;\n  minWireVersion: number;\n  maxWireVersion: number;\n  roundTripTime: number;\n  lastUpdateTime: number;\n  lastWriteDate: number;\n  me: string | null;\n  primary: string | null;\n  setName: string | null;\n  setVersion: number | null;\n  electionId: ObjectId | null;\n  logicalSessionTimeoutMinutes: number | null;\n\n  // NOTE: does this belong here? It seems we should gossip the cluster time at the CMAP level\n  $clusterTime?: ClusterTime;\n\n  /**\n   * Create a ServerDescription\n   * @internal\n   *\n   * @param address - The address of the server\n   * @param hello - An optional hello response for this server\n   */\n  constructor(\n    address: HostAddress | string,\n    hello?: Document,\n    options: ServerDescriptionOptions = {}\n  ) {\n    if (address == null || address === '') {\n      throw new MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n    }\n\n    this.address =\n      typeof address === 'string'\n        ? HostAddress.fromString(address).toString() // Use HostAddress to normalize\n        : address.toString();\n    this.type = parseServerType(hello, options);\n    this.hosts = hello?.hosts?.map((host: string) => host.toLowerCase()) ?? [];\n    this.passives = hello?.passives?.map((host: string) => host.toLowerCase()) ?? [];\n    this.arbiters = hello?.arbiters?.map((host: string) => host.toLowerCase()) ?? [];\n    this.tags = hello?.tags ?? {};\n    this.minWireVersion = hello?.minWireVersion ?? 0;\n    this.maxWireVersion = hello?.maxWireVersion ?? 0;\n    this.roundTripTime = options?.roundTripTime ?? -1;\n    this.lastUpdateTime = now();\n    this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n    this.error = options.error ?? null;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n    this.setName = hello?.setName ?? null;\n    this.setVersion = hello?.setVersion ?? null;\n    this.electionId = hello?.electionId ?? null;\n    this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n    this.primary = hello?.primary ?? null;\n    this.me = hello?.me?.toLowerCase() ?? null;\n    this.$clusterTime = hello?.$clusterTime ?? null;\n  }\n\n  get hostAddress(): HostAddress {\n    return HostAddress.fromString(this.address);\n  }\n\n  get allHosts(): string[] {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n\n  /** Is this server available for reads*/\n  get isReadable(): boolean {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n\n  /** Is this server data bearing */\n  get isDataBearing(): boolean {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n\n  /** Is this server available for writes */\n  get isWritable(): boolean {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host(): string {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port(): number {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   */\n  equals(other?: ServerDescription | null): boolean {\n    // Despite using the comparator that would determine a nullish topologyVersion as greater than\n    // for equality we should only always perform direct equality comparison\n    const topologyVersionsEqual =\n      this.topologyVersion === other?.topologyVersion ||\n      compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n\n    const electionIdsEqual =\n      this.electionId != null && other?.electionId != null\n        ? compareObjectId(this.electionId, other.electionId) === 0\n        : this.electionId === other?.electionId;\n\n    return (\n      other != null &&\n      errorStrictEqual(this.error, other.error) &&\n      this.type === other.type &&\n      this.minWireVersion === other.minWireVersion &&\n      arrayStrictEqual(this.hosts, other.hosts) &&\n      tagsStrictEqual(this.tags, other.tags) &&\n      this.setName === other.setName &&\n      this.setVersion === other.setVersion &&\n      electionIdsEqual &&\n      this.primary === other.primary &&\n      this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n      topologyVersionsEqual\n    );\n  }\n}\n\n// Parses a `hello` message and determines the server type\nexport function parseServerType(hello?: Document, options?: ServerDescriptionOptions): ServerType {\n  if (options?.loadBalanced) {\n    return ServerType.LoadBalancer;\n  }\n\n  if (!hello || !hello.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (hello.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (hello.msg && hello.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (hello.setName) {\n    if (hello.hidden) {\n      return ServerType.RSOther;\n    } else if (hello.isWritablePrimary) {\n      return ServerType.RSPrimary;\n    } else if (hello.secondary) {\n      return ServerType.RSSecondary;\n    } else if (hello.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n\nfunction tagsStrictEqual(tags: TagSet, tags2: TagSet): boolean {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n\n  return (\n    tagsKeys.length === tags2Keys.length &&\n    tagsKeys.every((key: string) => tags2[key] === tags[key])\n  );\n}\n\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nexport function compareTopologyVersion(\n  currentTv?: TopologyVersion | null,\n  newTv?: TopologyVersion | null\n): 0 | -1 | 1 {\n  if (currentTv == null || newTv == null) {\n    return -1;\n  }\n\n  if (!currentTv.processId.equals(newTv.processId)) {\n    return -1;\n  }\n\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n  const currentCounter = Long.isLong(currentTv.counter)\n    ? currentTv.counter\n    : Long.fromNumber(currentTv.counter);\n  const newCounter = Long.isLong(newTv.counter) ? newTv.counter : Long.fromNumber(newTv.counter);\n\n  return currentCounter.compare(newCounter);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}