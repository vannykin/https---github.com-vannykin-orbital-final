{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n  constructor(collection) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(collection, options);\n    this.options = options;\n    this.collectionName = collection.collectionName;\n  }\n  execute(server, session, callback) {\n    const cmd = {\n      count: this.collectionName\n    };\n    if (typeof this.options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = this.options.maxTimeMS;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (this.options.comment !== undefined) {\n      cmd.comment = this.options.comment;\n    }\n    super.executeCommand(server, session, cmd, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      callback(undefined, response?.n || 0);\n    });\n  }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"names":["command_1","require","operation_1","EstimatedDocumentCountOperation","CommandOperation","constructor","collection","options","arguments","length","undefined","collectionName","execute","server","session","callback","cmd","count","maxTimeMS","comment","executeCommand","err","response","n","exports","defineAspects","Aspect","READ_OPERATION","RETRYABLE","CURSOR_CREATING"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\operations\\estimated_document_count.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface EstimatedDocumentCountOptions extends CommandOperationOptions {\n  /**\n   * The maximum amount of time to allow the operation to run.\n   *\n   * This option is sent only if the caller explicitly provides a value. The default is to not send a value.\n   */\n  maxTimeMS?: number;\n}\n\n/** @internal */\nexport class EstimatedDocumentCountOperation extends CommandOperation<number> {\n  override options: EstimatedDocumentCountOptions;\n  collectionName: string;\n\n  constructor(collection: Collection, options: EstimatedDocumentCountOptions = {}) {\n    super(collection, options);\n    this.options = options;\n    this.collectionName = collection.collectionName;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<number>\n  ): void {\n    const cmd: Document = { count: this.collectionName };\n\n    if (typeof this.options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = this.options.maxTimeMS;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (this.options.comment !== undefined) {\n      cmd.comment = this.options.comment;\n    }\n\n    super.executeCommand(server, session, cmd, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, response?.n || 0);\n    });\n  }\n}\n\ndefineAspects(EstimatedDocumentCountOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\n"],"mappings":";;;;;;AAKA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAYA;AACA,MAAaE,+BAAgC,SAAQH,SAAA,CAAAI,gBAAwB;EAI3EC,YAAYC,UAAsB,EAA6C;IAAA,IAA3CC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyC,EAAE;IAC7E,KAAK,CAACF,UAAU,EAAEC,OAAO,CAAC;IAC1B,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACI,cAAc,GAAGL,UAAU,CAACK,cAAc;EACjD;EAESC,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA0B;IAE1B,MAAMC,GAAG,GAAa;MAAEC,KAAK,EAAE,IAAI,CAACN;IAAc,CAAE;IAEpD,IAAI,OAAO,IAAI,CAACJ,OAAO,CAACW,SAAS,KAAK,QAAQ,EAAE;MAC9CF,GAAG,CAACE,SAAS,GAAG,IAAI,CAACX,OAAO,CAACW,SAAS;;IAGxC;IACA;IACA,IAAI,IAAI,CAACX,OAAO,CAACY,OAAO,KAAKT,SAAS,EAAE;MACtCM,GAAG,CAACG,OAAO,GAAG,IAAI,CAACZ,OAAO,CAACY,OAAO;;IAGpC,KAAK,CAACC,cAAc,CAACP,MAAM,EAAEC,OAAO,EAAEE,GAAG,EAAE,CAACK,GAAG,EAAEC,QAAQ,KAAI;MAC3D,IAAID,GAAG,EAAE;QACPN,QAAQ,CAACM,GAAG,CAAC;QACb;;MAGFN,QAAQ,CAACL,SAAS,EAAEY,QAAQ,EAAEC,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC;EACJ;;AAnCFC,OAAA,CAAArB,+BAAA,GAAAA,+BAAA;AAsCA,IAAAD,WAAA,CAAAuB,aAAa,EAACtB,+BAA+B,EAAE,CAC7CD,WAAA,CAAAwB,MAAM,CAACC,cAAc,EACrBzB,WAAA,CAAAwB,MAAM,CAACE,SAAS,EAChB1B,WAAA,CAAAwB,MAAM,CAACG,eAAe,CACvB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}