{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst write_concern_1 = require(\"./../write_concern\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n  /**\n   * @param bucket - Handle for this stream's corresponding bucket\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   * @internal\n   */\n  constructor(bucket, filename, options) {\n    super();\n    options = options ?? {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n    // Signals the write is all done\n    this.done = false;\n    this.id = options.id ? options.id : new bson_1.ObjectId();\n    // properly inherit the default chunksize from parent\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n      checkIndexes(this).then(() => {\n        this.bucket.s.checkedIndexes = true;\n        this.bucket.emit('index');\n      }, () => null);\n    }\n  }\n  write(chunk, encodingOrCallback, callback) {\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    return waitForIndexes(this, () => doWrite(this, chunk, encoding, callback));\n  }\n  /**\n   * Places this write stream into an aborted state (all future writes fail)\n   * and deletes all chunks that have already been written.\n   */\n  async abort() {\n    if (this.state.streamEnd) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n    }\n    if (this.state.aborted) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n    }\n    this.state.aborted = true;\n    await this.chunks.deleteMany({\n      files_id: this.id\n    });\n  }\n  end(chunkOrCallback, encodingOrCallback, callback) {\n    const chunk = typeof chunkOrCallback === 'function' ? undefined : chunkOrCallback;\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof chunkOrCallback === 'function' ? chunkOrCallback : typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    if (this.state.streamEnd || checkAborted(this, callback)) return this;\n    this.state.streamEnd = true;\n    if (callback) {\n      this.once(GridFSBucketWriteStream.FINISH, result => {\n        if (callback) callback(undefined, result);\n      });\n    }\n    if (!chunk) {\n      waitForIndexes(this, () => !!writeRemnant(this));\n      return this;\n    }\n    this.write(chunk, encoding, () => {\n      writeRemnant(this);\n    });\n    return this;\n  }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\n/** @event */\nGridFSBucketWriteStream.CLOSE = 'close';\n/** @event */\nGridFSBucketWriteStream.ERROR = 'error';\n/**\n * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\n * @event\n */\nGridFSBucketWriteStream.FINISH = 'finish';\nfunction __handleError(stream, error, callback) {\n  if (stream.state.errored) {\n    return;\n  }\n  stream.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  stream.emit(GridFSBucketWriteStream.ERROR, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: new bson_1.ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\nasync function checkChunksIndex(stream) {\n  const index = {\n    files_id: 1,\n    n: 1\n  };\n  let indexes;\n  try {\n    indexes = await stream.chunks.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n  const hasChunksIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n      return true;\n    }\n    return false;\n  });\n  if (!hasChunksIndex) {\n    const writeConcernOptions = getWriteOptions(stream);\n    await stream.chunks.createIndex(index, {\n      ...writeConcernOptions,\n      background: true,\n      unique: true\n    });\n  }\n}\nfunction checkDone(stream, callback) {\n  if (stream.done) return true;\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true;\n    // Create a new files doc\n    const filesDoc = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n    if (checkAborted(stream, callback)) {\n      return false;\n    }\n    stream.files.insertOne(filesDoc, getWriteOptions(stream)).then(() => {\n      stream.emit(GridFSBucketWriteStream.FINISH, filesDoc);\n      stream.emit(GridFSBucketWriteStream.CLOSE);\n    }, error => {\n      return __handleError(stream, error, callback);\n    });\n    return true;\n  }\n  return false;\n}\nasync function checkIndexes(stream) {\n  const doc = await stream.files.findOne({}, {\n    projection: {\n      _id: 1\n    }\n  });\n  if (doc != null) {\n    // If at least one document exists assume the collection has the required index\n    return;\n  }\n  const index = {\n    filename: 1,\n    uploadDate: 1\n  };\n  let indexes;\n  try {\n    indexes = await stream.files.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n  const hasFileIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n      return true;\n    }\n    return false;\n  });\n  if (!hasFileIndex) {\n    await stream.files.createIndex(index, {\n      background: false\n    });\n  }\n  await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n  const ret = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n  return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n  stream.length += inputBuf.length;\n  // Input is small enough to fit in our buffer\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n    callback && callback();\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc;\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n      if (checkAborted(stream, callback)) {\n        return false;\n      }\n      stream.chunks.insertOne(doc, getWriteOptions(stream)).then(() => {\n        --stream.state.outstandingRequests;\n        --outstandingRequests;\n        if (!outstandingRequests) {\n          stream.emit('drain', doc);\n          callback && callback();\n          checkDone(stream);\n        }\n      }, error => {\n        return __handleError(stream, error);\n      });\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\nfunction getWriteOptions(stream) {\n  const obj = {};\n  if (stream.writeConcern) {\n    obj.writeConcern = {\n      w: stream.writeConcern.w,\n      wtimeout: stream.writeConcern.wtimeout,\n      j: stream.writeConcern.j\n    };\n  }\n  return obj;\n}\nfunction waitForIndexes(stream, callback) {\n  if (stream.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n  stream.bucket.once('index', () => {\n    callback(true);\n  });\n  return true;\n}\nfunction writeRemnant(stream, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n  ++stream.state.outstandingRequests;\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n  stream.chunks.insertOne(doc, getWriteOptions(stream)).then(() => {\n    --stream.state.outstandingRequests;\n    checkDone(stream);\n  }, error => {\n    return __handleError(stream, error);\n  });\n  return true;\n}\nfunction checkAborted(stream, callback) {\n  if (stream.state.aborted) {\n    if (typeof callback === 'function') {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosedError\n      callback(new error_1.MongoAPIError('Stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["stream_1","require","bson_1","error_1","write_concern_1","GridFSBucketWriteStream","Writable","constructor","bucket","filename","options","chunks","s","_chunksCollection","files","_filesCollection","writeConcern","WriteConcern","fromOptions","done","id","ObjectId","chunkSizeBytes","bufToStore","Buffer","alloc","length","n","pos","state","streamEnd","outstandingRequests","errored","aborted","calledOpenUploadStream","checkIndexes","then","checkedIndexes","emit","write","chunk","encodingOrCallback","callback","encoding","undefined","waitForIndexes","doWrite","abort","MongoAPIError","deleteMany","files_id","end","chunkOrCallback","checkAborted","once","FINISH","result","writeRemnant","exports","CLOSE","ERROR","__handleError","stream","error","createChunkDoc","filesId","data","_id","checkChunksIndex","index","indexes","listIndexes","toArray","MongoError","code","MONGODB_ERROR_CODES","NamespaceNotFound","hasChunksIndex","find","keys","Object","key","writeConcernOptions","getWriteOptions","createIndex","background","unique","checkDone","filesDoc","createFilesDoc","contentType","aliases","metadata","insertOne","doc","findOne","projection","uploadDate","hasFileIndex","chunkSize","ret","Date","inputBuf","isBuffer","from","copy","inputBufRemaining","spaceRemaining","numToCopy","Math","min","inputBufPos","obj","w","wtimeout","j","remnant"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\gridfs\\upload.ts"],"sourcesContent":["import { Writable } from 'stream';\n\nimport type { Document } from '../bson';\nimport { ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport { AnyError, MongoAPIError, MONGODB_ERROR_CODES, MongoError } from '../error';\nimport type { Callback } from '../utils';\nimport type { WriteConcernOptions } from '../write_concern';\nimport { WriteConcern } from './../write_concern';\nimport type { GridFSFile } from './download';\nimport type { GridFSBucket } from './index';\n\n/** @public */\nexport interface GridFSChunk {\n  _id: ObjectId;\n  files_id: ObjectId;\n  n: number;\n  data: Buffer | Uint8Array;\n}\n\n/** @public */\nexport interface GridFSBucketWriteStreamOptions extends WriteConcernOptions {\n  /** Overwrite this bucket's chunkSizeBytes for this file */\n  chunkSizeBytes?: number;\n  /** Custom file id for the GridFS file. */\n  id?: ObjectId;\n  /** Object to store in the file document's `metadata` field */\n  metadata?: Document;\n  /** String to store in the file document's `contentType` field */\n  contentType?: string;\n  /** Array of strings to store in the file document's `aliases` field */\n  aliases?: string[];\n}\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nexport class GridFSBucketWriteStream extends Writable implements NodeJS.WritableStream {\n  bucket: GridFSBucket;\n  chunks: Collection<GridFSChunk>;\n  filename: string;\n  files: Collection<GridFSFile>;\n  options: GridFSBucketWriteStreamOptions;\n  done: boolean;\n  id: ObjectId;\n  chunkSizeBytes: number;\n  bufToStore: Buffer;\n  length: number;\n  n: number;\n  pos: number;\n  state: {\n    streamEnd: boolean;\n    outstandingRequests: number;\n    errored: boolean;\n    aborted: boolean;\n  };\n  writeConcern?: WriteConcern;\n\n  /** @event */\n  static readonly CLOSE = 'close';\n  /** @event */\n  static readonly ERROR = 'error';\n  /**\n   * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\n   * @event\n   */\n  static readonly FINISH = 'finish';\n\n  /**\n   * @param bucket - Handle for this stream's corresponding bucket\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   * @internal\n   */\n  constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions) {\n    super();\n\n    options = options ?? {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n    // Signals the write is all done\n    this.done = false;\n\n    this.id = options.id ? options.id : new ObjectId();\n    // properly inherit the default chunksize from parent\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n\n      checkIndexes(this).then(\n        () => {\n          this.bucket.s.checkedIndexes = true;\n          this.bucket.emit('index');\n        },\n        () => null\n      );\n    }\n  }\n\n  /**\n   * Write a buffer to the stream.\n   *\n   * @param chunk - Buffer to write\n   * @param encodingOrCallback - Optional encoding for the buffer\n   * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n   * @returns False if this write required flushing a chunk to MongoDB. True otherwise.\n   */\n  override write(chunk: Buffer | string): boolean;\n  override write(chunk: Buffer | string, callback: Callback<void>): boolean;\n  override write(chunk: Buffer | string, encoding: BufferEncoding | undefined): boolean;\n  override write(\n    chunk: Buffer | string,\n    encoding: BufferEncoding | undefined,\n    callback: Callback<void>\n  ): boolean;\n  override write(\n    chunk: Buffer | string,\n    encodingOrCallback?: Callback<void> | BufferEncoding,\n    callback?: Callback<void>\n  ): boolean {\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    return waitForIndexes(this, () => doWrite(this, chunk, encoding, callback));\n  }\n\n  /**\n   * Places this write stream into an aborted state (all future writes fail)\n   * and deletes all chunks that have already been written.\n   */\n  async abort(): Promise<void> {\n    if (this.state.streamEnd) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new MongoAPIError('Cannot abort a stream that has already completed');\n    }\n\n    if (this.state.aborted) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new MongoAPIError('Cannot call abort() on a stream twice');\n    }\n\n    this.state.aborted = true;\n    await this.chunks.deleteMany({ files_id: this.id });\n  }\n\n  /**\n   * Tells the stream that no more data will be coming in. The stream will\n   * persist the remaining data to MongoDB, write the files document, and\n   * then emit a 'finish' event.\n   *\n   * @param chunk - Buffer to write\n   * @param encoding - Optional encoding for the buffer\n   * @param callback - Function to call when all files and chunks have been persisted to MongoDB\n   */\n  override end(): this;\n  override end(chunk: Buffer): this;\n  override end(callback: Callback<GridFSFile | void>): this;\n  override end(chunk: Buffer, callback: Callback<GridFSFile | void>): this;\n  override end(chunk: Buffer, encoding: BufferEncoding): this;\n  override end(\n    chunk: Buffer,\n    encoding: BufferEncoding | undefined,\n    callback: Callback<GridFSFile | void>\n  ): this;\n  override end(\n    chunkOrCallback?: Buffer | Callback<GridFSFile | void>,\n    encodingOrCallback?: BufferEncoding | Callback<GridFSFile | void>,\n    callback?: Callback<GridFSFile | void>\n  ): this {\n    const chunk = typeof chunkOrCallback === 'function' ? undefined : chunkOrCallback;\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback =\n      typeof chunkOrCallback === 'function'\n        ? chunkOrCallback\n        : typeof encodingOrCallback === 'function'\n        ? encodingOrCallback\n        : callback;\n\n    if (this.state.streamEnd || checkAborted(this, callback)) return this;\n\n    this.state.streamEnd = true;\n\n    if (callback) {\n      this.once(GridFSBucketWriteStream.FINISH, (result: GridFSFile) => {\n        if (callback) callback(undefined, result);\n      });\n    }\n\n    if (!chunk) {\n      waitForIndexes(this, () => !!writeRemnant(this));\n      return this;\n    }\n\n    this.write(chunk, encoding, () => {\n      writeRemnant(this);\n    });\n\n    return this;\n  }\n}\n\nfunction __handleError(\n  stream: GridFSBucketWriteStream,\n  error: AnyError,\n  callback?: Callback\n): void {\n  if (stream.state.errored) {\n    return;\n  }\n  stream.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  stream.emit(GridFSBucketWriteStream.ERROR, error);\n}\n\nfunction createChunkDoc(filesId: ObjectId, n: number, data: Buffer): GridFSChunk {\n  return {\n    _id: new ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\n\nasync function checkChunksIndex(stream: GridFSBucketWriteStream): Promise<void> {\n  const index = { files_id: 1, n: 1 };\n\n  let indexes;\n  try {\n    indexes = await stream.chunks.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n\n  const hasChunksIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n      return true;\n    }\n    return false;\n  });\n\n  if (!hasChunksIndex) {\n    const writeConcernOptions = getWriteOptions(stream);\n    await stream.chunks.createIndex(index, {\n      ...writeConcernOptions,\n      background: true,\n      unique: true\n    });\n  }\n}\n\nfunction checkDone(stream: GridFSBucketWriteStream, callback?: Callback): boolean {\n  if (stream.done) return true;\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true;\n    // Create a new files doc\n    const filesDoc = createFilesDoc(\n      stream.id,\n      stream.length,\n      stream.chunkSizeBytes,\n      stream.filename,\n      stream.options.contentType,\n      stream.options.aliases,\n      stream.options.metadata\n    );\n\n    if (checkAborted(stream, callback)) {\n      return false;\n    }\n\n    stream.files.insertOne(filesDoc, getWriteOptions(stream)).then(\n      () => {\n        stream.emit(GridFSBucketWriteStream.FINISH, filesDoc);\n        stream.emit(GridFSBucketWriteStream.CLOSE);\n      },\n      error => {\n        return __handleError(stream, error, callback);\n      }\n    );\n\n    return true;\n  }\n\n  return false;\n}\n\nasync function checkIndexes(stream: GridFSBucketWriteStream): Promise<void> {\n  const doc = await stream.files.findOne({}, { projection: { _id: 1 } });\n  if (doc != null) {\n    // If at least one document exists assume the collection has the required index\n    return;\n  }\n\n  const index = { filename: 1, uploadDate: 1 };\n\n  let indexes;\n  try {\n    indexes = await stream.files.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n\n  const hasFileIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n      return true;\n    }\n    return false;\n  });\n\n  if (!hasFileIndex) {\n    await stream.files.createIndex(index, { background: false });\n  }\n\n  await checkChunksIndex(stream);\n}\n\nfunction createFilesDoc(\n  _id: ObjectId,\n  length: number,\n  chunkSize: number,\n  filename: string,\n  contentType?: string,\n  aliases?: string[],\n  metadata?: Document\n): GridFSFile {\n  const ret: GridFSFile = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n\nfunction doWrite(\n  stream: GridFSBucketWriteStream,\n  chunk: Buffer | string,\n  encoding?: BufferEncoding,\n  callback?: Callback<void>\n): boolean {\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n  stream.length += inputBuf.length;\n\n  // Input is small enough to fit in our buffer\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n\n    callback && callback();\n\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining: number = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc: GridFSChunk;\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (checkAborted(stream, callback)) {\n        return false;\n      }\n\n      stream.chunks.insertOne(doc, getWriteOptions(stream)).then(\n        () => {\n          --stream.state.outstandingRequests;\n          --outstandingRequests;\n\n          if (!outstandingRequests) {\n            stream.emit('drain', doc);\n            callback && callback();\n            checkDone(stream);\n          }\n        },\n        error => {\n          return __handleError(stream, error);\n        }\n      );\n\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\n\nfunction getWriteOptions(stream: GridFSBucketWriteStream): WriteConcernOptions {\n  const obj: WriteConcernOptions = {};\n  if (stream.writeConcern) {\n    obj.writeConcern = {\n      w: stream.writeConcern.w,\n      wtimeout: stream.writeConcern.wtimeout,\n      j: stream.writeConcern.j\n    };\n  }\n  return obj;\n}\n\nfunction waitForIndexes(\n  stream: GridFSBucketWriteStream,\n  callback: (res: boolean) => boolean\n): boolean {\n  if (stream.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n\n  stream.bucket.once('index', () => {\n    callback(true);\n  });\n\n  return true;\n}\n\nfunction writeRemnant(stream: GridFSBucketWriteStream, callback?: Callback): boolean {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n\n  ++stream.state.outstandingRequests;\n\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\n\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n\n  stream.chunks.insertOne(doc, getWriteOptions(stream)).then(\n    () => {\n      --stream.state.outstandingRequests;\n      checkDone(stream);\n    },\n    error => {\n      return __handleError(stream, error);\n    }\n  );\n  return true;\n}\n\nfunction checkAborted(stream: GridFSBucketWriteStream, callback?: Callback<void>): boolean {\n  if (stream.state.aborted) {\n    if (typeof callback === 'function') {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosedError\n      callback(new MongoAPIError('Stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}