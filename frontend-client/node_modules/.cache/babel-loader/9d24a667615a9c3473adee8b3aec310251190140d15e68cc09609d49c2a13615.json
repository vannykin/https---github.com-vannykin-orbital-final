{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RunCommandCursor = void 0;\nconst error_1 = require(\"../error\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst get_more_1 = require(\"../operations/get_more\");\nconst run_command_1 = require(\"../operations/run_command\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @public */\nclass RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n  /**\n   * Controls the `getMore.comment` field\n   * @param comment - any BSON value\n   */\n  setComment(comment) {\n    this.getMoreOptions.comment = comment;\n    return this;\n  }\n  /**\n   * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n   * @param maxTimeMS - the number of milliseconds to wait for new data\n   */\n  setMaxTimeMS(maxTimeMS) {\n    this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n    return this;\n  }\n  /**\n   * Controls the `getMore.batchSize` field\n   * @param maxTimeMS - the number documents to return in the `nextBatch`\n   */\n  setBatchSize(batchSize) {\n    this.getMoreOptions.batchSize = batchSize;\n    return this;\n  }\n  /** Unsupported for RunCommandCursor */\n  clone() {\n    throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n  }\n  /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n  withReadConcern(_) {\n    throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');\n  }\n  /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n  addCursorFlag(_, __) {\n    throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');\n  }\n  /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */\n  maxTimeMS(_) {\n    throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');\n  }\n  /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n  batchSize(_) {\n    throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');\n  }\n  /** @internal */\n  constructor(db, command) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(db.client, (0, utils_1.ns)(db.namespace), options);\n    this.getMoreOptions = {};\n    this.db = db;\n    this.command = Object.freeze({\n      ...command\n    });\n  }\n  /** @internal */\n  _initialize(session, callback) {\n    const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n      ...this.cursorOptions,\n      session: session,\n      readPreference: this.cursorOptions.readPreference\n    });\n    (0, execute_operation_1.executeOperation)(this.client, operation).then(response => {\n      if (response.cursor == null) {\n        callback(new error_1.MongoUnexpectedServerResponseError('Expected server to respond with cursor'));\n        return;\n      }\n      callback(undefined, {\n        server: operation.server,\n        session,\n        response\n      });\n    }, err => callback(err));\n  }\n  /** @internal */\n  _getMore(_batchSize, callback) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n      ...this.cursorOptions,\n      session: this.session,\n      ...this.getMoreOptions\n    });\n    (0, execute_operation_1.executeOperation)(this.client, getMoreOperation, callback);\n  }\n}\nexports.RunCommandCursor = RunCommandCursor;","map":{"version":3,"names":["error_1","require","execute_operation_1","get_more_1","run_command_1","utils_1","abstract_cursor_1","RunCommandCursor","AbstractCursor","setComment","comment","getMoreOptions","setMaxTimeMS","maxTimeMS","maxAwaitTimeMS","setBatchSize","batchSize","clone","MongoAPIError","withReadConcern","_","addCursorFlag","__","constructor","db","command","options","arguments","length","undefined","client","ns","namespace","Object","freeze","_initialize","session","callback","operation","RunCommandOperation","cursorOptions","readPreference","executeOperation","then","response","cursor","MongoUnexpectedServerResponseError","server","err","_getMore","_batchSize","getMoreOperation","GetMoreOperation","id","exports"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\cursor\\run_command_cursor.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document, Long } from '../bson';\nimport type { Db } from '../db';\nimport { MongoAPIError, MongoUnexpectedServerResponseError } from '../error';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport { GetMoreOperation } from '../operations/get_more';\nimport { RunCommandOperation } from '../operations/run_command';\nimport type { ReadConcernLike } from '../read_concern';\nimport type { ReadPreferenceLike } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport { Callback, ns } from '../utils';\nimport { AbstractCursor } from './abstract_cursor';\n\n/** @public */\nexport type RunCursorCommandOptions = {\n  readPreference?: ReadPreferenceLike;\n  session?: ClientSession;\n} & BSONSerializeOptions;\n\n/** @internal */\ntype RunCursorCommandResponse = {\n  cursor: { id: bigint | Long | number; ns: string; firstBatch: Document[] };\n  ok: 1;\n};\n\n/** @public */\nexport class RunCommandCursor extends AbstractCursor {\n  public readonly command: Readonly<Record<string, any>>;\n  public readonly getMoreOptions: {\n    comment?: any;\n    maxAwaitTimeMS?: number;\n    batchSize?: number;\n  } = {};\n\n  /**\n   * Controls the `getMore.comment` field\n   * @param comment - any BSON value\n   */\n  public setComment(comment: any): this {\n    this.getMoreOptions.comment = comment;\n    return this;\n  }\n\n  /**\n   * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n   * @param maxTimeMS - the number of milliseconds to wait for new data\n   */\n  public setMaxTimeMS(maxTimeMS: number): this {\n    this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n    return this;\n  }\n\n  /**\n   * Controls the `getMore.batchSize` field\n   * @param maxTimeMS - the number documents to return in the `nextBatch`\n   */\n  public setBatchSize(batchSize: number): this {\n    this.getMoreOptions.batchSize = batchSize;\n    return this;\n  }\n\n  /** Unsupported for RunCommandCursor */\n  public override clone(): never {\n    throw new MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n  }\n\n  /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n  public override withReadConcern(_: ReadConcernLike): never {\n    throw new MongoAPIError(\n      'RunCommandCursor does not support readConcern it must be attached to the command being run'\n    );\n  }\n\n  /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n  public override addCursorFlag(_: string, __: boolean): never {\n    throw new MongoAPIError(\n      'RunCommandCursor does not support cursor flags, they must be attached to the command being run'\n    );\n  }\n\n  /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */\n  public override maxTimeMS(_: number): never {\n    throw new MongoAPIError(\n      'maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()'\n    );\n  }\n\n  /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n  public override batchSize(_: number): never {\n    throw new MongoAPIError(\n      'batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()'\n    );\n  }\n\n  /** @internal */\n  private db: Db;\n\n  /** @internal */\n  constructor(db: Db, command: Document, options: RunCursorCommandOptions = {}) {\n    super(db.client, ns(db.namespace), options);\n    this.db = db;\n    this.command = Object.freeze({ ...command });\n  }\n\n  /** @internal */\n  protected _initialize(session: ClientSession, callback: Callback<ExecutionResult>) {\n    const operation = new RunCommandOperation<RunCursorCommandResponse>(this.db, this.command, {\n      ...this.cursorOptions,\n      session: session,\n      readPreference: this.cursorOptions.readPreference\n    });\n    executeOperation(this.client, operation).then(\n      response => {\n        if (response.cursor == null) {\n          callback(\n            new MongoUnexpectedServerResponseError('Expected server to respond with cursor')\n          );\n          return;\n        }\n        callback(undefined, {\n          server: operation.server,\n          session,\n          response\n        });\n      },\n      err => callback(err)\n    );\n  }\n\n  /** @internal */\n  override _getMore(_batchSize: number, callback: Callback<Document>) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const getMoreOperation = new GetMoreOperation(this.namespace, this.id!, this.server!, {\n      ...this.cursorOptions,\n      session: this.session,\n      ...this.getMoreOptions\n    });\n\n    executeOperation(this.client, getMoreOperation, callback);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}