{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst errors_1 = require(\"../cmap/errors\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kMonitor = Symbol('monitor');\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.topology = topology;\n    this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n    this.s = {\n      description,\n      options,\n      state: common_1.STATE_CLOSED,\n      operationCount: 0\n    };\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.pool.on(event, e => this.emit(event, e));\n    }\n    this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n    if (this.loadBalanced) {\n      this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const monitor = new monitor_1.Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      monitor.on(event, e => this.emit(event, e));\n    }\n    monitor.on('resetServer', error => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n  get clusterTime() {\n    return this.topology.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.topology.clusterTime = clusterTime;\n  }\n  get description() {\n    return this.s.description;\n  }\n  get name() {\n    return this.s.description.address;\n  }\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n  get loadBalanced() {\n    return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this[kMonitor]?.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {\n        force: false\n      };\n    }\n    options = Object.assign({}, {\n      force: false\n    }, options);\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    if (!this.loadBalanced) {\n      this[kMonitor]?.close();\n    }\n    this.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck() {\n    if (!this.loadBalanced) {\n      this[kMonitor]?.requestCheck();\n    }\n  }\n  /**\n   * Execute a command\n   * @internal\n   */\n  command(ns, cmd, options, callback) {\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n    // Clone the options\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    });\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n    const session = finalOptions.session;\n    const conn = session?.pinnedConnection;\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n    this.incrementOperationCount();\n    this.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        this.decrementOperationCount();\n        if (!err) {\n          return cb(new error_1.MongoRuntimeError('Failed to create connection without error'));\n        }\n        if (!(err instanceof errors_1.PoolClearedError)) {\n          this.handleError(err);\n        }\n        return cb(err);\n      }\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n        this.decrementOperationCount();\n        cb(error, response);\n      }));\n    }, callback);\n  }\n  /**\n   * Handle SDAM error\n   * @internal\n   */\n  handleError(error, connection) {\n    if (!(error instanceof error_1.MongoError)) {\n      return;\n    }\n    const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n    if (isStaleError) {\n      return;\n    }\n    const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n    const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n    const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n      // In load balanced mode we never mark the server as unknown and always\n      // clear for the specific service id.\n      if (!this.loadBalanced) {\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        markServerUnknown(this, error);\n      } else if (connection) {\n        this.pool.clear({\n          serviceId: connection.serviceId\n        });\n      }\n    } else {\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(this, error)) {\n          const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n          if (this.loadBalanced && connection && shouldClearPool) {\n            this.pool.clear({\n              serviceId: connection.serviceId\n            });\n          }\n          if (!this.loadBalanced) {\n            if (shouldClearPool) {\n              error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n            }\n            markServerUnknown(this, error);\n            process.nextTick(() => this.requestCheck());\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Decrement the operation count, returning the new count.\n   */\n  decrementOperationCount() {\n    return this.s.operationCount -= 1;\n  }\n  /**\n   * Increment the operation count, returning the new count.\n   */\n  incrementOperationCount() {\n    return this.s.operationCount += 1;\n  }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    server[kMonitor]?.reset();\n  }\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error\n  }));\n}\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n  return false;\n}\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n  return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options?.session;\n  return function handleOperationResult(error, result) {\n    // We should not swallow an error if it is present.\n    if (error == null && result != null) {\n      return callback(undefined, result);\n    }\n    if (options != null && 'noResponse' in options && options.noResponse === true) {\n      return callback(undefined, null);\n    }\n    if (!error) {\n      return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n    if (connectionIsStale(server.pool, connection)) {\n      return callback(error);\n    }\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n      // inActiveTransaction check handles commit and abort.\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n      if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    }\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n    server.handleError(error, connection);\n    return callback(error);\n  };\n}","map":{"version":3,"names":["connection_1","require","connection_pool_1","errors_1","constants_1","error_1","mongo_types_1","transactions_1","utils_1","common_1","monitor_1","server_description_1","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","kMonitor","Symbol","Server","TypedEventEmitter","constructor","topology","description","options","serverApi","poolOptions","hostAddress","pool","ConnectionPool","s","state","operationCount","event","CMAP_EVENTS","APM_EVENTS","on","e","emit","Connection","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","monitor","Monitor","HEARTBEAT_EVENTS","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","ServerDescription","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","name","address","autoEncrypter","type","TopologyType","LoadBalanced","connect","destroy","callback","force","Object","assign","close","err","requestCheck","command","ns","cmd","MongoInvalidArgumentError","db","MongoServerClosedError","finalOptions","wireProtocolCommand","omitReadPreference","readPreference","session","conn","pinnedConnection","isPinnableCommand","checkOut","checkedOut","pin","incrementOperationCount","withConnection","cb","decrementOperationCount","MongoRuntimeError","PoolClearedError","handleError","makeOperationHandler","response","connection","MongoError","isStaleError","connectionGeneration","generation","isNetworkNonTimeoutError","MongoNetworkError","MongoNetworkTimeoutError","isNetworkTimeoutBeforeHandshakeError","isNetworkErrorBeforeHandshake","isAuthHandshakeError","hasErrorLabel","MongoErrorLabel","HandshakeError","addErrorLabel","ResetPool","clear","serviceId","isSDAMUnrecoverableError","shouldHandleStateChangeError","shouldClearPool","maxWireVersion","isNodeShuttingDownError","process","nextTick","exports","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_FAILED","CLOSED","ENDED","oldRtt","alpha","server","reset","undefined","inTransaction","connectionIsStale","serviceGenerations","get","toHexString","etv","topologyVersion","stv","compareTopologyVersion","inActiveTransaction","isTransactionCommand","isRetryableWritesEnabled","retryWrites","handleOperationResult","result","noResponse","MongoUnexpectedServerResponseError","hasEnded","serverSession","isDirty","TransientTransactionError","supportsRetryableWrites","RetryableWriteError","needsRetryableWriteLabel","isPinned","unpin"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\sdam\\server.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { CommandOptions, Connection, DestroyOptions } from '../cmap/connection';\nimport {\n  ConnectionPool,\n  ConnectionPoolEvents,\n  ConnectionPoolOptions\n} from '../cmap/connection_pool';\nimport { PoolClearedError } from '../cmap/errors';\nimport {\n  APM_EVENTS,\n  CLOSED,\n  CMAP_EVENTS,\n  CONNECT,\n  DESCRIPTION_RECEIVED,\n  ENDED,\n  HEARTBEAT_EVENTS,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED\n} from '../constants';\nimport type { AutoEncrypter } from '../deps';\nimport {\n  AnyError,\n  isNetworkErrorBeforeHandshake,\n  isNodeShuttingDownError,\n  isSDAMUnrecoverableError,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  MongoServerClosedError,\n  MongoServerError,\n  MongoUnexpectedServerResponseError,\n  needsRetryableWriteLabel\n} from '../error';\nimport type { ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport type { GetMoreOptions } from '../operations/get_more';\nimport type { ClientSession } from '../sessions';\nimport { isTransactionCommand } from '../transactions';\nimport {\n  Callback,\n  EventEmitterWithState,\n  makeStateMachine,\n  maxWireVersion,\n  MongoDBNamespace,\n  supportsRetryableWrites\n} from '../utils';\nimport {\n  ClusterTime,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TopologyType\n} from './common';\nimport type {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Monitor, MonitorOptions } from './monitor';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport type { Topology } from './topology';\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kMonitor = Symbol('monitor');\n\n/** @internal */\nexport type ServerOptions = Omit<ConnectionPoolOptions, 'id' | 'generation' | 'hostAddress'> &\n  MonitorOptions;\n\n/** @internal */\nexport interface ServerPrivate {\n  /** The server description for this server */\n  description: ServerDescription;\n  /** A copy of the options used to construct this instance */\n  options: ServerOptions;\n  /** The current state of the Server */\n  state: string;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  /** A count of the operations currently running against the server. */\n  operationCount: number;\n}\n\n/** @public */\nexport type ServerEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(server: Server): void;\n  descriptionReceived(description: ServerDescription): void;\n  closed(): void;\n  ended(): void;\n} & ConnectionPoolEvents &\n  EventEmitterWithState;\n\n/** @internal */\nexport class Server extends TypedEventEmitter<ServerEvents> {\n  /** @internal */\n  s: ServerPrivate;\n  /** @internal */\n  topology: Topology;\n  /** @internal */\n  pool: ConnectionPool;\n  serverApi?: ServerApi;\n  hello?: Document;\n  [kMonitor]: Monitor | null;\n\n  /** @event */\n  static readonly SERVER_HEARTBEAT_STARTED = SERVER_HEARTBEAT_STARTED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_SUCCEEDED = SERVER_HEARTBEAT_SUCCEEDED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_FAILED = SERVER_HEARTBEAT_FAILED;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly DESCRIPTION_RECEIVED = DESCRIPTION_RECEIVED;\n  /** @event */\n  static readonly CLOSED = CLOSED;\n  /** @event */\n  static readonly ENDED = ENDED;\n\n  /**\n   * Create a server\n   */\n  constructor(topology: Topology, description: ServerDescription, options: ServerOptions) {\n    super();\n\n    this.serverApi = options.serverApi;\n\n    const poolOptions = { hostAddress: description.hostAddress, ...options };\n\n    this.topology = topology;\n    this.pool = new ConnectionPool(this, poolOptions);\n\n    this.s = {\n      description,\n      options,\n      state: STATE_CLOSED,\n      operationCount: 0\n    };\n\n    for (const event of [...CMAP_EVENTS, ...APM_EVENTS]) {\n      this.pool.on(event, (e: any) => this.emit(event, e));\n    }\n\n    this.pool.on(Connection.CLUSTER_TIME_RECEIVED, (clusterTime: ClusterTime) => {\n      this.clusterTime = clusterTime;\n    });\n\n    if (this.loadBalanced) {\n      this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const monitor = new Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n\n    for (const event of HEARTBEAT_EVENTS) {\n      monitor.on(event, (e: any) => this.emit(event, e));\n    }\n\n    monitor.on('resetServer', (error: MongoError) => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event: ServerHeartbeatSucceededEvent) => {\n      this.emit(\n        Server.DESCRIPTION_RECEIVED,\n        new ServerDescription(this.description.hostAddress, event.reply, {\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n        })\n      );\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.topology.clusterTime = clusterTime;\n  }\n\n  get description(): ServerDescription {\n    return this.s.description;\n  }\n\n  get name(): string {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter(): AutoEncrypter | undefined {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n\n  get loadBalanced(): boolean {\n    return this.topology.description.type === TopologyType.LoadBalanced;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this[kMonitor]?.connect();\n    } else {\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n\n  /** Destroy the server connection */\n  destroy(options?: DestroyOptions, callback?: Callback): void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = { force: false };\n    }\n    options = Object.assign({}, { force: false }, options);\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this[kMonitor]?.close();\n    }\n\n    this.pool.close(options, err => {\n      stateTransition(this, STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck(): void {\n    if (!this.loadBalanced) {\n      this[kMonitor]?.requestCheck();\n    }\n  }\n\n  /**\n   * Execute a command\n   * @internal\n   */\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback<Document>\n  ): void {\n    if (callback == null) {\n      throw new MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoServerClosedError());\n      return;\n    }\n\n    // Clone the options\n    const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n\n    const session = finalOptions.session;\n    const conn = session?.pinnedConnection;\n\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.incrementOperationCount();\n\n    this.pool.withConnection(\n      conn,\n      (err, conn, cb) => {\n        if (err || !conn) {\n          this.decrementOperationCount();\n          if (!err) {\n            return cb(new MongoRuntimeError('Failed to create connection without error'));\n          }\n          if (!(err instanceof PoolClearedError)) {\n            this.handleError(err);\n          }\n          return cb(err);\n        }\n\n        conn.command(\n          ns,\n          cmd,\n          finalOptions,\n          makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n            this.decrementOperationCount();\n            cb(error, response);\n          })\n        );\n      },\n      callback\n    );\n  }\n\n  /**\n   * Handle SDAM error\n   * @internal\n   */\n  handleError(error: AnyError, connection?: Connection) {\n    if (!(error instanceof MongoError)) {\n      return;\n    }\n\n    const isStaleError =\n      error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n    if (isStaleError) {\n      return;\n    }\n\n    const isNetworkNonTimeoutError =\n      error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError);\n    const isNetworkTimeoutBeforeHandshakeError = isNetworkErrorBeforeHandshake(error);\n    const isAuthHandshakeError = error.hasErrorLabel(MongoErrorLabel.HandshakeError);\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n      // In load balanced mode we never mark the server as unknown and always\n      // clear for the specific service id.\n      if (!this.loadBalanced) {\n        error.addErrorLabel(MongoErrorLabel.ResetPool);\n        markServerUnknown(this, error);\n      } else if (connection) {\n        this.pool.clear({ serviceId: connection.serviceId });\n      }\n    } else {\n      if (isSDAMUnrecoverableError(error)) {\n        if (shouldHandleStateChangeError(this, error)) {\n          const shouldClearPool = maxWireVersion(this) <= 7 || isNodeShuttingDownError(error);\n          if (this.loadBalanced && connection && shouldClearPool) {\n            this.pool.clear({ serviceId: connection.serviceId });\n          }\n\n          if (!this.loadBalanced) {\n            if (shouldClearPool) {\n              error.addErrorLabel(MongoErrorLabel.ResetPool);\n            }\n            markServerUnknown(this, error);\n            process.nextTick(() => this.requestCheck());\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Decrement the operation count, returning the new count.\n   */\n  private decrementOperationCount(): number {\n    return (this.s.operationCount -= 1);\n  }\n\n  /**\n   * Increment the operation count, returning the new count.\n   */\n  private incrementOperationCount(): number {\n    return (this.s.operationCount += 1);\n  }\n}\n\nfunction calculateRoundTripTime(oldRtt: number, duration: number): number {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server: Server, error?: MongoServerError) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\n    server[kMonitor]?.reset();\n  }\n\n  server.emit(\n    Server.DESCRIPTION_RECEIVED,\n    new ServerDescription(server.description.hostAddress, undefined, { error })\n  );\n}\n\nfunction isPinnableCommand(cmd: Document, session?: ClientSession): boolean {\n  if (session) {\n    return (\n      session.inTransaction() ||\n      'aggregate' in cmd ||\n      'find' in cmd ||\n      'getMore' in cmd ||\n      'listCollections' in cmd ||\n      'listIndexes' in cmd\n    );\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\n  if (connection.serviceId) {\n    return (\n      connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString())\n    );\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server: Server, err: MongoError) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session: ClientSession | undefined, cmd: Document) {\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\n}\n\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology: Topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(\n  server: Server,\n  connection: Connection,\n  cmd: Document,\n  options: CommandOptions | GetMoreOptions | undefined,\n  callback: Callback\n): Callback {\n  const session = options?.session;\n  return function handleOperationResult(error, result) {\n    // We should not swallow an error if it is present.\n    if (error == null && result != null) {\n      return callback(undefined, result);\n    }\n\n    if (options != null && 'noResponse' in options && options.noResponse === true) {\n      return callback(undefined, null);\n    }\n\n    if (!error) {\n      return callback(new MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n\n    if (!(error instanceof MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n\n    if (connectionIsStale(server.pool, connection)) {\n      return callback(error);\n    }\n\n    if (error instanceof MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n\n      // inActiveTransaction check handles commit and abort.\n      if (\n        inActiveTransaction(session, cmd) &&\n        !error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.TransientTransactionError);\n      }\n\n      if (\n        (isRetryableWritesEnabled(server.topology) || isTransactionCommand(cmd)) &&\n        supportsRetryableWrites(server) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if (\n        (isRetryableWritesEnabled(server.topology) || isTransactionCommand(cmd)) &&\n        needsRetryableWriteLabel(error, maxWireVersion(server)) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n    }\n\n    if (\n      session &&\n      session.isPinned &&\n      error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n    ) {\n      session.unpin({ force: true });\n    }\n\n    server.handleError(error, connection);\n\n    return callback(error);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}