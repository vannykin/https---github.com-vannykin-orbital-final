{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  constructor(chunks, files, readPreference, filter, options) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  _read() {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n  start() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n  end() {\n    let end = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   */\n  async abort() {\n    this.push(null);\n    this.destroyed = true;\n    if (this.s.cursor) {\n      try {\n        await this.s.cursor.close();\n      } finally {\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    }\n  }\n}\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * An error occurred\n * @event\n */\nGridFSBucketReadStream.ERROR = 'error';\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\n/**\n * Emitted when a chunk of data is available to be consumed.\n * @event\n */\nGridFSBucketReadStream.DATA = 'data';\n/**\n * Fired when the stream is exhausted (no more data events).\n * @event\n */\nGridFSBucketReadStream.END = 'end';\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n * @event\n */\nGridFSBucketReadStream.CLOSE = 'close';\nfunction throwIfInitialized(stream) {\n  if (stream.s.init) {\n    throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\nfunction doRead(stream) {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n  const handleReadResult = _ref => {\n    let {\n      error,\n      doc\n    } = _ref;\n    if (stream.destroyed) {\n      return;\n    }\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n    if (!doc) {\n      stream.push(null);\n      stream.s.cursor?.close().then(() => {\n        stream.emit(GridFSBucketReadStream.CLOSE);\n      }, error => {\n        stream.emit(GridFSBucketReadStream.ERROR, error);\n      });\n      return;\n    }\n    if (!stream.s.file) return;\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    if (doc.n > expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n    if (doc.n < expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n      }\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n    }\n    stream.s.bytesRead += buf.byteLength;\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n    let sliceStart = null;\n    let sliceEnd = null;\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n    stream.push(buf);\n    return;\n  };\n  stream.s.cursor.next().then(doc => handleReadResult({\n    error: null,\n    doc\n  }), error => handleReadResult({\n    error,\n    doc: null\n  }));\n}\nfunction init(stream) {\n  const findOneOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n  const handleReadResult = _ref2 => {\n    let {\n      error,\n      doc\n    } = _ref2;\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    if (!doc) {\n      const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`;\n      // TODO(NODE-3483)\n      const err = new error_1.MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    }\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    const filter = {\n      files_id: doc._id\n    };\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = {\n          $gte: skip\n        };\n      }\n    }\n    stream.s.cursor = stream.s.chunks.find(filter).sort({\n      n: 1\n    });\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc;\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({\n    error: null,\n    doc\n  }), error => handleReadResult({\n    error,\n    doc: null\n  }));\n}\nfunction waitForFile(stream, callback) {\n  if (stream.s.file) {\n    return callback();\n  }\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n  stream.once('file', () => {\n    callback();\n  });\n}\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n    }\n    if (options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n    }\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n    return options.start - stream.s.bytesRead;\n  }\n  throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n    }\n    if (options.start == null || options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}","map":{"version":3,"names":["stream_1","require","error_1","GridFSBucketReadStream","Readable","constructor","chunks","files","readPreference","filter","options","s","bytesToTrim","bytesToSkip","bytesRead","expected","init","expectedEnd","start","end","_read","destroyed","waitForFile","doRead","arguments","length","undefined","throwIfInitialized","abort","push","cursor","close","emit","CLOSE","exports","ERROR","FILE","DATA","END","stream","MongoGridFSStreamError","file","handleReadResult","_ref","error","doc","then","bytesRemaining","expectedN","expectedLength","Math","min","chunkSize","n","MongoGridFSChunkError","buf","Buffer","isBuffer","data","buffer","byteLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","slice","next","findOneOptions","sort","skip","_ref2","identifier","_id","toString","filename","errmsg","err","MongoRuntimeError","code","handleStartOption","files_id","floor","$gte","find","withReadPreference","ceil","handleEndOption","findOne","callback","once","MongoInvalidArgumentError","limit"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\gridfs\\download.ts"],"sourcesContent":["import { Readable } from 'stream';\n\nimport type { Document, ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport {\n  MongoGridFSChunkError,\n  MongoGridFSStreamError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError\n} from '../error';\nimport type { FindOptions } from '../operations/find';\nimport type { ReadPreference } from '../read_preference';\nimport type { Sort } from '../sort';\nimport type { Callback } from '../utils';\nimport type { GridFSChunk } from './upload';\n\n/** @public */\nexport interface GridFSBucketReadStreamOptions {\n  sort?: Sort;\n  skip?: number;\n  /**\n   * 0-indexed non-negative byte offset from the beginning of the file\n   */\n  start?: number;\n  /**\n   * 0-indexed non-negative byte offset to the end of the file contents\n   * to be returned by the stream. `end` is non-inclusive\n   */\n  end?: number;\n}\n\n/** @public */\nexport interface GridFSBucketReadStreamOptionsWithRevision extends GridFSBucketReadStreamOptions {\n  /** The revision number relative to the oldest file with the given filename. 0\n   * gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the\n   * newest. */\n  revision?: number;\n}\n\n/** @public */\nexport interface GridFSFile {\n  _id: ObjectId;\n  length: number;\n  chunkSize: number;\n  filename: string;\n  contentType?: string;\n  aliases?: string[];\n  metadata?: Document;\n  uploadDate: Date;\n}\n\n/** @internal */\nexport interface GridFSBucketReadStreamPrivate {\n  bytesRead: number;\n  bytesToTrim: number;\n  bytesToSkip: number;\n  chunks: Collection<GridFSChunk>;\n  cursor?: FindCursor<GridFSChunk>;\n  expected: number;\n  files: Collection<GridFSFile>;\n  filter: Document;\n  init: boolean;\n  expectedEnd: number;\n  file?: GridFSFile;\n  options: {\n    sort?: Sort;\n    skip?: number;\n    start: number;\n    end: number;\n  };\n  readPreference?: ReadPreference;\n}\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nexport class GridFSBucketReadStream extends Readable implements NodeJS.ReadableStream {\n  /** @internal */\n  s: GridFSBucketReadStreamPrivate;\n\n  /**\n   * An error occurred\n   * @event\n   */\n  static readonly ERROR = 'error' as const;\n  /**\n   * Fires when the stream loaded the file document corresponding to the provided id.\n   * @event\n   */\n  static readonly FILE = 'file' as const;\n  /**\n   * Emitted when a chunk of data is available to be consumed.\n   * @event\n   */\n  static readonly DATA = 'data' as const;\n  /**\n   * Fired when the stream is exhausted (no more data events).\n   * @event\n   */\n  static readonly END = 'end' as const;\n  /**\n   * Fired when the stream is exhausted and the underlying cursor is killed\n   * @event\n   */\n  static readonly CLOSE = 'close' as const;\n\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  constructor(\n    chunks: Collection<GridFSChunk>,\n    files: Collection<GridFSFile>,\n    readPreference: ReadPreference | undefined,\n    filter: Document,\n    options?: GridFSBucketReadStreamOptions\n  ) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  override _read(): void {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n  start(start = 0): this {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n  end(end = 0): this {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   */\n  async abort(): Promise<void> {\n    this.push(null);\n    this.destroyed = true;\n    if (this.s.cursor) {\n      try {\n        await this.s.cursor.close();\n      } finally {\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    }\n  }\n}\n\nfunction throwIfInitialized(stream: GridFSBucketReadStream): void {\n  if (stream.s.init) {\n    throw new MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\n\nfunction doRead(stream: GridFSBucketReadStream): void {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n\n  const handleReadResult = ({\n    error,\n    doc\n  }: { error: Error; doc: null } | { error: null; doc: any }) => {\n    if (stream.destroyed) {\n      return;\n    }\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n    if (!doc) {\n      stream.push(null);\n\n      stream.s.cursor?.close().then(\n        () => {\n          stream.emit(GridFSBucketReadStream.CLOSE);\n        },\n        error => {\n          stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n      );\n      return;\n    }\n\n    if (!stream.s.file) return;\n\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    if (doc.n > expectedN) {\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(\n          `ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`\n        )\n      );\n    }\n\n    if (doc.n < expectedN) {\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`)\n      );\n    }\n\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(\n          GridFSBucketReadStream.ERROR,\n          new MongoGridFSChunkError(\n            `ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`\n          )\n        );\n      }\n\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(\n          `ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`\n        )\n      );\n    }\n\n    stream.s.bytesRead += buf.byteLength;\n\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n\n    let sliceStart = null;\n    let sliceEnd = null;\n\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n\n    stream.push(buf);\n    return;\n  };\n\n  stream.s.cursor.next().then(\n    doc => handleReadResult({ error: null, doc }),\n    error => handleReadResult({ error, doc: null })\n  );\n}\n\nfunction init(stream: GridFSBucketReadStream): void {\n  const findOneOptions: FindOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n\n  const handleReadResult = ({\n    error,\n    doc\n  }: { error: Error; doc: null } | { error: null; doc: any }) => {\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    if (!doc) {\n      const identifier = stream.s.filter._id\n        ? stream.s.filter._id.toString()\n        : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`;\n      // TODO(NODE-3483)\n      const err = new MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    }\n\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    const filter: Document = { files_id: doc._id };\n\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = { $gte: skip };\n      }\n    }\n    stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc as GridFSFile;\n\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(\n    doc => handleReadResult({ error: null, doc }),\n    error => handleReadResult({ error, doc: null })\n  );\n}\n\nfunction waitForFile(stream: GridFSBucketReadStream, callback: Callback): void {\n  if (stream.s.file) {\n    return callback();\n  }\n\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n\n  stream.once('file', () => {\n    callback();\n  });\n}\n\nfunction handleStartOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  options: GridFSBucketReadStreamOptions\n): number {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new MongoInvalidArgumentError(\n        `Stream start (${options.start}) must not be more than the length of the file (${doc.length})`\n      );\n    }\n    if (options.start < 0) {\n      throw new MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new MongoInvalidArgumentError(\n        `Stream start (${options.start}) must not be greater than stream end (${options.end})`\n      );\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n\n    return options.start - stream.s.bytesRead;\n  }\n  throw new MongoInvalidArgumentError('Start option must be defined');\n}\n\nfunction handleEndOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  cursor: FindCursor<GridFSChunk>,\n  options: GridFSBucketReadStreamOptions\n) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new MongoInvalidArgumentError(\n        `Stream end (${options.end}) must not be more than the length of the file (${doc.length})`\n      );\n    }\n    if (options.start == null || options.start < 0) {\n      throw new MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new MongoInvalidArgumentError('End option must be defined');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}