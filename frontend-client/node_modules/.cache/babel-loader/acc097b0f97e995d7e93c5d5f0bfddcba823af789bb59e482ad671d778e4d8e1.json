{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst common_functions_1 = require(\"./common_functions\");\nconst operation_1 = require(\"./operation\");\nconst VALID_INDEX_OPTIONS = new Set(['background', 'unique', 'name', 'partialFilterExpression', 'sparse', 'hidden', 'expireAfterSeconds', 'storageEngine', 'collation', 'version',\n// text indexes\n'weights', 'default_language', 'language_override', 'textIndexVersion',\n// 2d-sphere indexes\n'2dsphereIndexVersion',\n// 2d indexes\n'bits', 'min', 'max',\n// geoHaystack Indexes\n'bucketSize',\n// wildcard indexes\n'wildcardProjection']);\nfunction isIndexDirection(x) {\n  return typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack';\n}\nfunction isSingleIndexTuple(t) {\n  return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n  const key = new Map();\n  const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n  // Iterate through array and handle different types\n  for (const spec of indexSpecs) {\n    if (typeof spec === 'string') {\n      key.set(spec, 1);\n    } else if (Array.isArray(spec)) {\n      key.set(spec[0], spec[1] ?? 1);\n    } else if (spec instanceof Map) {\n      for (const [property, value] of spec) {\n        key.set(property, value);\n      }\n    } else if ((0, utils_1.isObject)(spec)) {\n      for (const [property, value] of Object.entries(spec)) {\n        key.set(property, value);\n      }\n    }\n  }\n  return {\n    ...options,\n    key\n  };\n}\n/** @internal */\nclass IndexesOperation extends operation_1.AbstractOperation {\n  constructor(collection, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const options = this.options;\n    (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n      full: true,\n      ...options,\n      readPreference: this.readPreference,\n      session\n    }, callback);\n  }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n  constructor(parent, collectionName, indexes, options) {\n    super(parent, options);\n    this.options = options ?? {};\n    this.collectionName = collectionName;\n    this.indexes = indexes.map(userIndex => {\n      // Ensure the key is a Map to preserve index key ordering\n      const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n      const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n      const validIndexOptions = Object.fromEntries(Object.entries({\n        ...userIndex\n      }).filter(_ref => {\n        let [optionName] = _ref;\n        return VALID_INDEX_OPTIONS.has(optionName);\n      }));\n      return {\n        ...validIndexOptions,\n        name,\n        key\n      };\n    });\n  }\n  execute(server, session, callback) {\n    const options = this.options;\n    const indexes = this.indexes;\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const cmd = {\n      createIndexes: this.collectionName,\n      indexes\n    };\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        callback(new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4'));\n        return;\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n    super.executeCommand(server, session, cmd, err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      const indexNames = indexes.map(index => index.name || '');\n      callback(undefined, indexNames);\n    });\n  }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass CreateIndexOperation extends CreateIndexesOperation {\n  constructor(parent, collectionName, indexSpec, options) {\n    super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, indexNames) => {\n      if (err || !indexNames) return callback(err);\n      return callback(undefined, indexNames[0]);\n    });\n  }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */\nclass EnsureIndexOperation extends CreateIndexOperation {\n  constructor(db, collectionName, indexSpec, options) {\n    super(db, collectionName, indexSpec, options);\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.db = db;\n    this.collectionName = collectionName;\n  }\n  execute(server, session, callback) {\n    const indexName = this.indexes[0].name;\n    const cursor = this.db.collection(this.collectionName).listIndexes({\n      session\n    });\n    cursor.toArray().then(indexes => {\n      indexes = Array.isArray(indexes) ? indexes : [indexes];\n      if (indexes.some(index => index.name === indexName)) {\n        callback(undefined, indexName);\n        return;\n      }\n      super.execute(server, session, callback);\n    }, error => {\n      if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n        // ignore \"NamespaceNotFound\" errors\n        return super.execute(server, session, callback);\n      }\n      return callback(error);\n    });\n  }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n  constructor(collection, indexName, options) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n  execute(server, session, callback) {\n    const cmd = {\n      dropIndexes: this.collection.collectionName,\n      index: this.indexName\n    };\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass DropIndexesOperation extends DropIndexOperation {\n  constructor(collection, options) {\n    super(collection, '*', options);\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, err => {\n      if (err) return callback(err, false);\n      callback(undefined, true);\n    });\n  }\n}\nexports.DropIndexesOperation = DropIndexesOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n  constructor(collection, options) {\n    super(collection, options);\n    this.options = {\n      ...options\n    };\n    delete this.options.writeConcern;\n    this.collectionNamespace = collection.s.namespace;\n  }\n  execute(server, session, callback) {\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const cursor = this.options.batchSize ? {\n      batchSize: this.options.batchSize\n    } : {};\n    const command = {\n      listIndexes: this.collectionNamespace.collection,\n      cursor\n    };\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */\nclass IndexExistsOperation extends operation_1.AbstractOperation {\n  constructor(collection, indexes, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const indexes = this.indexes;\n    (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    }, (err, indexInformation) => {\n      // If we have an error return\n      if (err != null) return callback(err);\n      // Let's check for the index names\n      if (!Array.isArray(indexes)) return callback(undefined, indexInformation[indexes] != null);\n      // Check in list of indexes\n      for (let i = 0; i < indexes.length; i++) {\n        if (indexInformation[indexes[i]] == null) {\n          return callback(undefined, false);\n        }\n      }\n      // All keys found return true\n      return callback(undefined, true);\n    });\n  }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */\nclass IndexInformationOperation extends operation_1.AbstractOperation {\n  constructor(db, name, options) {\n    super(options);\n    this.options = options ?? {};\n    this.db = db;\n    this.name = name;\n  }\n  execute(server, session, callback) {\n    const db = this.db;\n    const name = this.name;\n    (0, common_functions_1.indexInformation)(db, name, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    }, callback);\n  }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["error_1","require","read_preference_1","utils_1","command_1","common_functions_1","operation_1","VALID_INDEX_OPTIONS","Set","isIndexDirection","x","isSingleIndexTuple","t","Array","isArray","length","makeIndexSpec","indexSpec","options","key","Map","indexSpecs","spec","set","property","value","isObject","Object","entries","IndexesOperation","AbstractOperation","constructor","collection","execute","server","session","callback","coll","indexInformation","s","db","collectionName","full","readPreference","exports","CreateIndexesOperation","CommandOperation","parent","indexes","map","userIndex","name","from","flat","join","validIndexOptions","fromEntries","filter","_ref","optionName","has","serverWireVersion","maxWireVersion","cmd","createIndexes","commitQuorum","MongoCompatibilityError","collation","undefined","executeCommand","err","indexNames","index","CreateIndexOperation","EnsureIndexOperation","ReadPreference","primary","indexName","cursor","listIndexes","toArray","then","some","error","MongoError","code","MONGODB_ERROR_CODES","NamespaceNotFound","DropIndexOperation","dropIndexes","DropIndexesOperation","ListIndexesOperation","writeConcern","collectionNamespace","namespace","batchSize","command","comment","IndexExistsOperation","i","IndexInformationOperation","defineAspects","Aspect","READ_OPERATION","RETRYABLE","CURSOR_CREATING","WRITE_OPERATION"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\operations\\indexes.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Db } from '../db';\nimport { MongoCompatibilityError, MONGODB_ERROR_CODES, MongoError } from '../error';\nimport type { OneOrMore } from '../mongo_types';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, isObject, maxWireVersion, MongoDBNamespace } from '../utils';\nimport {\n  CollationOptions,\n  CommandOperation,\n  CommandOperationOptions,\n  OperationParent\n} from './command';\nimport { indexInformation, IndexInformationOptions } from './common_functions';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\nconst VALID_INDEX_OPTIONS = new Set([\n  'background',\n  'unique',\n  'name',\n  'partialFilterExpression',\n  'sparse',\n  'hidden',\n  'expireAfterSeconds',\n  'storageEngine',\n  'collation',\n  'version',\n\n  // text indexes\n  'weights',\n  'default_language',\n  'language_override',\n  'textIndexVersion',\n\n  // 2d-sphere indexes\n  '2dsphereIndexVersion',\n\n  // 2d indexes\n  'bits',\n  'min',\n  'max',\n\n  // geoHaystack Indexes\n  'bucketSize',\n\n  // wildcard indexes\n  'wildcardProjection'\n]);\n\n/** @public */\nexport type IndexDirection =\n  | -1\n  | 1\n  | '2d'\n  | '2dsphere'\n  | 'text'\n  | 'geoHaystack'\n  | 'hashed'\n  | number;\n\nfunction isIndexDirection(x: unknown): x is IndexDirection {\n  return (\n    typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack'\n  );\n}\n/** @public */\nexport type IndexSpecification = OneOrMore<\n  | string\n  | [string, IndexDirection]\n  | { [key: string]: IndexDirection }\n  | Map<string, IndexDirection>\n>;\n\n/** @public */\nexport interface IndexDescription\n  extends Pick<\n    CreateIndexesOptions,\n    | 'background'\n    | 'unique'\n    | 'partialFilterExpression'\n    | 'sparse'\n    | 'hidden'\n    | 'expireAfterSeconds'\n    | 'storageEngine'\n    | 'version'\n    | 'weights'\n    | 'default_language'\n    | 'language_override'\n    | 'textIndexVersion'\n    | '2dsphereIndexVersion'\n    | 'bits'\n    | 'min'\n    | 'max'\n    | 'bucketSize'\n    | 'wildcardProjection'\n  > {\n  collation?: CollationOptions;\n  name?: string;\n  key: { [key: string]: IndexDirection } | Map<string, IndexDirection>;\n}\n\n/** @public */\nexport interface CreateIndexesOptions extends Omit<CommandOperationOptions, 'writeConcern'> {\n  /** Creates the index in the background, yielding whenever possible. */\n  background?: boolean;\n  /** Creates an unique index. */\n  unique?: boolean;\n  /** Override the autogenerated index name (useful if the resulting name is larger than 128 bytes) */\n  name?: string;\n  /** Creates a partial index based on the given filter object (MongoDB 3.2 or higher) */\n  partialFilterExpression?: Document;\n  /** Creates a sparse index. */\n  sparse?: boolean;\n  /** Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher) */\n  expireAfterSeconds?: number;\n  /** Allows users to configure the storage engine on a per-index basis when creating an index. (MongoDB 3.0 or higher) */\n  storageEngine?: Document;\n  /** (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes. */\n  commitQuorum?: number | string;\n  /** Specifies the index version number, either 0 or 1. */\n  version?: number;\n  // text indexes\n  weights?: Document;\n  default_language?: string;\n  language_override?: string;\n  textIndexVersion?: number;\n  // 2d-sphere indexes\n  '2dsphereIndexVersion'?: number;\n  // 2d indexes\n  bits?: number;\n  /** For geospatial indexes set the lower bound for the co-ordinates. */\n  min?: number;\n  /** For geospatial indexes set the high bound for the co-ordinates. */\n  max?: number;\n  // geoHaystack Indexes\n  bucketSize?: number;\n  // wildcard indexes\n  wildcardProjection?: Document;\n  /** Specifies that the index should exist on the target collection but should not be used by the query planner when executing operations. (MongoDB 4.4 or higher) */\n  hidden?: boolean;\n}\n\nfunction isSingleIndexTuple(t: unknown): t is [string, IndexDirection] {\n  return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\n\nfunction makeIndexSpec(\n  indexSpec: IndexSpecification,\n  options?: CreateIndexesOptions\n): IndexDescription {\n  const key: Map<string, IndexDirection> = new Map();\n\n  const indexSpecs =\n    !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n\n  // Iterate through array and handle different types\n  for (const spec of indexSpecs) {\n    if (typeof spec === 'string') {\n      key.set(spec, 1);\n    } else if (Array.isArray(spec)) {\n      key.set(spec[0], spec[1] ?? 1);\n    } else if (spec instanceof Map) {\n      for (const [property, value] of spec) {\n        key.set(property, value);\n      }\n    } else if (isObject(spec)) {\n      for (const [property, value] of Object.entries(spec)) {\n        key.set(property, value);\n      }\n    }\n  }\n\n  return { ...options, key };\n}\n\n/** @internal */\nexport class IndexesOperation extends AbstractOperation<Document[]> {\n  override options: IndexInformationOptions;\n  collection: Collection;\n\n  constructor(collection: Collection, options: IndexInformationOptions) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document[]>\n  ): void {\n    const coll = this.collection;\n    const options = this.options;\n\n    indexInformation(\n      coll.s.db,\n      coll.collectionName,\n      { full: true, ...options, readPreference: this.readPreference, session },\n      callback\n    );\n  }\n}\n\n/** @internal */\nexport class CreateIndexesOperation<\n  T extends string | string[] = string[]\n> extends CommandOperation<T> {\n  override options: CreateIndexesOptions;\n  collectionName: string;\n  indexes: ReadonlyArray<Omit<IndexDescription, 'key'> & { key: Map<string, IndexDirection> }>;\n\n  constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexes: IndexDescription[],\n    options?: CreateIndexesOptions\n  ) {\n    super(parent, options);\n\n    this.options = options ?? {};\n    this.collectionName = collectionName;\n    this.indexes = indexes.map(userIndex => {\n      // Ensure the key is a Map to preserve index key ordering\n      const key =\n        userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n      const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n      const validIndexOptions = Object.fromEntries(\n        Object.entries({ ...userIndex }).filter(([optionName]) =>\n          VALID_INDEX_OPTIONS.has(optionName)\n        )\n      );\n      return {\n        ...validIndexOptions,\n        name,\n        key\n      };\n    });\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<T>\n  ): void {\n    const options = this.options;\n    const indexes = this.indexes;\n\n    const serverWireVersion = maxWireVersion(server);\n\n    const cmd: Document = { createIndexes: this.collectionName, indexes };\n\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        callback(\n          new MongoCompatibilityError(\n            'Option `commitQuorum` for `createIndexes` not supported on servers < 4.4'\n          )\n        );\n        return;\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n\n    super.executeCommand(server, session, cmd, err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const indexNames = indexes.map(index => index.name || '');\n      callback(undefined, indexNames as T);\n    });\n  }\n}\n\n/** @internal */\nexport class CreateIndexOperation extends CreateIndexesOperation<string> {\n  constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ) {\n    super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n  }\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<string>\n  ): void {\n    super.execute(server, session, (err, indexNames) => {\n      if (err || !indexNames) return callback(err);\n      return callback(undefined, indexNames[0]);\n    });\n  }\n}\n\n/** @internal */\nexport class EnsureIndexOperation extends CreateIndexOperation {\n  db: Db;\n\n  constructor(\n    db: Db,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ) {\n    super(db, collectionName, indexSpec, options);\n\n    this.readPreference = ReadPreference.primary;\n    this.db = db;\n    this.collectionName = collectionName;\n  }\n\n  override execute(server: Server, session: ClientSession | undefined, callback: Callback): void {\n    const indexName = this.indexes[0].name;\n    const cursor = this.db.collection(this.collectionName).listIndexes({ session });\n    cursor.toArray().then(\n      indexes => {\n        indexes = Array.isArray(indexes) ? indexes : [indexes];\n        if (indexes.some(index => index.name === indexName)) {\n          callback(undefined, indexName);\n          return;\n        }\n        super.execute(server, session, callback);\n      },\n      error => {\n        if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n          // ignore \"NamespaceNotFound\" errors\n          return super.execute(server, session, callback);\n        }\n        return callback(error);\n      }\n    );\n  }\n}\n\n/** @public */\nexport type DropIndexesOptions = CommandOperationOptions;\n\n/** @internal */\nexport class DropIndexOperation extends CommandOperation<Document> {\n  override options: DropIndexesOptions;\n  collection: Collection;\n  indexName: string;\n\n  constructor(collection: Collection, indexName: string, options?: DropIndexesOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\n\n/** @internal */\nexport class DropIndexesOperation extends DropIndexOperation {\n  constructor(collection: Collection, options: DropIndexesOptions) {\n    super(collection, '*', options);\n  }\n\n  override execute(server: Server, session: ClientSession | undefined, callback: Callback): void {\n    super.execute(server, session, err => {\n      if (err) return callback(err, false);\n      callback(undefined, true);\n    });\n  }\n}\n\n/** @public */\nexport interface ListIndexesOptions extends Omit<CommandOperationOptions, 'writeConcern'> {\n  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n  batchSize?: number;\n}\n\n/** @internal */\nexport class ListIndexesOperation extends CommandOperation<Document> {\n  /**\n   * @remarks WriteConcern can still be present on the options because\n   * we inherit options from the client/db/collection.  The\n   * key must be present on the options in order to delete it.\n   * This allows typescript to delete the key but will\n   * not allow a writeConcern to be assigned as a property on options.\n   */\n  override options: ListIndexesOptions & { writeConcern?: never };\n  collectionNamespace: MongoDBNamespace;\n\n  constructor(collection: Collection, options?: ListIndexesOptions) {\n    super(collection, options);\n\n    this.options = { ...options };\n    delete this.options.writeConcern;\n    this.collectionNamespace = collection.s.namespace;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const serverWireVersion = maxWireVersion(server);\n\n    const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n\n    const command: Document = { listIndexes: this.collectionNamespace.collection, cursor };\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @internal */\nexport class IndexExistsOperation extends AbstractOperation<boolean> {\n  override options: IndexInformationOptions;\n  collection: Collection;\n  indexes: string | string[];\n\n  constructor(\n    collection: Collection,\n    indexes: string | string[],\n    options: IndexInformationOptions\n  ) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<boolean>\n  ): void {\n    const coll = this.collection;\n    const indexes = this.indexes;\n\n    indexInformation(\n      coll.s.db,\n      coll.collectionName,\n      { ...this.options, readPreference: this.readPreference, session },\n      (err, indexInformation) => {\n        // If we have an error return\n        if (err != null) return callback(err);\n        // Let's check for the index names\n        if (!Array.isArray(indexes)) return callback(undefined, indexInformation[indexes] != null);\n        // Check in list of indexes\n        for (let i = 0; i < indexes.length; i++) {\n          if (indexInformation[indexes[i]] == null) {\n            return callback(undefined, false);\n          }\n        }\n\n        // All keys found return true\n        return callback(undefined, true);\n      }\n    );\n  }\n}\n\n/** @internal */\nexport class IndexInformationOperation extends AbstractOperation<Document> {\n  override options: IndexInformationOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options?: IndexInformationOptions) {\n    super(options);\n    this.options = options ?? {};\n    this.db = db;\n    this.name = name;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const db = this.db;\n    const name = this.name;\n\n    indexInformation(\n      db,\n      name,\n      { ...this.options, readPreference: this.readPreference, session },\n      callback\n    );\n  }\n}\n\ndefineAspects(ListIndexesOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(CreateIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(EnsureIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropIndexesOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":";;;;;;AAGA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,iBAAA,GAAAD,OAAA;AAGA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAAG,SAAA,GAAAH,OAAA;AAMA,MAAAI,kBAAA,GAAAJ,OAAA;AACA,MAAAK,WAAA,GAAAL,OAAA;AAEA,MAAMM,mBAAmB,GAAG,IAAIC,GAAG,CAAC,CAClC,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,yBAAyB,EACzB,QAAQ,EACR,QAAQ,EACR,oBAAoB,EACpB,eAAe,EACf,WAAW,EACX,SAAS;AAET;AACA,SAAS,EACT,kBAAkB,EAClB,mBAAmB,EACnB,kBAAkB;AAElB;AACA,sBAAsB;AAEtB;AACA,MAAM,EACN,KAAK,EACL,KAAK;AAEL;AACA,YAAY;AAEZ;AACA,oBAAoB,CACrB,CAAC;AAaF,SAASC,gBAAgBA,CAACC,CAAU;EAClC,OACE,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK,UAAU,IAAIA,CAAC,KAAK,MAAM,IAAIA,CAAC,KAAK,aAAa;AAElG;AA8EA,SAASC,kBAAkBA,CAACC,CAAU;EACpC,OAAOC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,IAAIA,CAAC,CAACG,MAAM,KAAK,CAAC,IAAIN,gBAAgB,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE;AAEA,SAASI,aAAaA,CACpBC,SAA6B,EAC7BC,OAA8B;EAE9B,MAAMC,GAAG,GAAgC,IAAIC,GAAG,EAAE;EAElD,MAAMC,UAAU,GACd,CAACR,KAAK,CAACC,OAAO,CAACG,SAAS,CAAC,IAAIN,kBAAkB,CAACM,SAAS,CAAC,GAAG,CAACA,SAAS,CAAC,GAAGA,SAAS;EAEtF;EACA,KAAK,MAAMK,IAAI,IAAID,UAAU,EAAE;IAC7B,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;MAC5BH,GAAG,CAACI,GAAG,CAACD,IAAI,EAAE,CAAC,CAAC;KACjB,MAAM,IAAIT,KAAK,CAACC,OAAO,CAACQ,IAAI,CAAC,EAAE;MAC9BH,GAAG,CAACI,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KAC/B,MAAM,IAAIA,IAAI,YAAYF,GAAG,EAAE;MAC9B,KAAK,MAAM,CAACI,QAAQ,EAAEC,KAAK,CAAC,IAAIH,IAAI,EAAE;QACpCH,GAAG,CAACI,GAAG,CAACC,QAAQ,EAAEC,KAAK,CAAC;;KAE3B,MAAM,IAAI,IAAAtB,OAAA,CAAAuB,QAAQ,EAACJ,IAAI,CAAC,EAAE;MACzB,KAAK,MAAM,CAACE,QAAQ,EAAEC,KAAK,CAAC,IAAIE,MAAM,CAACC,OAAO,CAACN,IAAI,CAAC,EAAE;QACpDH,GAAG,CAACI,GAAG,CAACC,QAAQ,EAAEC,KAAK,CAAC;;;;EAK9B,OAAO;IAAE,GAAGP,OAAO;IAAEC;EAAG,CAAE;AAC5B;AAEA;AACA,MAAaU,gBAAiB,SAAQvB,WAAA,CAAAwB,iBAA6B;EAIjEC,YAAYC,UAAsB,EAAEd,OAAgC;IAClE,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACc,UAAU,GAAGA,UAAU;EAC9B;EAESC,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA8B;IAE9B,MAAMC,IAAI,GAAG,IAAI,CAACL,UAAU;IAC5B,MAAMd,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,IAAAb,kBAAA,CAAAiC,gBAAgB,EACdD,IAAI,CAACE,CAAC,CAACC,EAAE,EACTH,IAAI,CAACI,cAAc,EACnB;MAAEC,IAAI,EAAE,IAAI;MAAE,GAAGxB,OAAO;MAAEyB,cAAc,EAAE,IAAI,CAACA,cAAc;MAAER;IAAO,CAAE,EACxEC,QAAQ,CACT;EACH;;AAxBFQ,OAAA,CAAAf,gBAAA,GAAAA,gBAAA;AA2BA;AACA,MAAagB,sBAEX,SAAQzC,SAAA,CAAA0C,gBAAmB;EAK3Bf,YACEgB,MAAuB,EACvBN,cAAsB,EACtBO,OAA2B,EAC3B9B,OAA8B;IAE9B,KAAK,CAAC6B,MAAM,EAAE7B,OAAO,CAAC;IAEtB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACuB,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACO,OAAO,GAAGA,OAAO,CAACC,GAAG,CAACC,SAAS,IAAG;MACrC;MACA,MAAM/B,GAAG,GACP+B,SAAS,CAAC/B,GAAG,YAAYC,GAAG,GAAG8B,SAAS,CAAC/B,GAAG,GAAG,IAAIC,GAAG,CAACO,MAAM,CAACC,OAAO,CAACsB,SAAS,CAAC/B,GAAG,CAAC,CAAC;MACvF,MAAMgC,IAAI,GAAGD,SAAS,CAACC,IAAI,IAAI,IAAI,GAAGD,SAAS,CAACC,IAAI,GAAGtC,KAAK,CAACuC,IAAI,CAACjC,GAAG,CAAC,CAACkC,IAAI,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC;MACvF,MAAMC,iBAAiB,GAAG5B,MAAM,CAAC6B,WAAW,CAC1C7B,MAAM,CAACC,OAAO,CAAC;QAAE,GAAGsB;MAAS,CAAE,CAAC,CAACO,MAAM,CAACC,IAAA;QAAA,IAAC,CAACC,UAAU,CAAC,GAAAD,IAAA;QAAA,OACnDnD,mBAAmB,CAACqD,GAAG,CAACD,UAAU,CAAC;MAAA,EACpC,CACF;MACD,OAAO;QACL,GAAGJ,iBAAiB;QACpBJ,IAAI;QACJhC;OACD;IACH,CAAC,CAAC;EACJ;EAESc,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAAqB;IAErB,MAAMlB,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAM8B,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,MAAMa,iBAAiB,GAAG,IAAA1D,OAAA,CAAA2D,cAAc,EAAC5B,MAAM,CAAC;IAEhD,MAAM6B,GAAG,GAAa;MAAEC,aAAa,EAAE,IAAI,CAACvB,cAAc;MAAEO;IAAO,CAAE;IAErE,IAAI9B,OAAO,CAAC+C,YAAY,IAAI,IAAI,EAAE;MAChC,IAAIJ,iBAAiB,GAAG,CAAC,EAAE;QACzBzB,QAAQ,CACN,IAAIpC,OAAA,CAAAkE,uBAAuB,CACzB,0EAA0E,CAC3E,CACF;QACD;;MAEFH,GAAG,CAACE,YAAY,GAAG/C,OAAO,CAAC+C,YAAY;;IAGzC;IACA,IAAI,CAAC/C,OAAO,CAACiD,SAAS,GAAGC,SAAS;IAElC,KAAK,CAACC,cAAc,CAACnC,MAAM,EAAEC,OAAO,EAAE4B,GAAG,EAAEO,GAAG,IAAG;MAC/C,IAAIA,GAAG,EAAE;QACPlC,QAAQ,CAACkC,GAAG,CAAC;QACb;;MAGF,MAAMC,UAAU,GAAGvB,OAAO,CAACC,GAAG,CAACuB,KAAK,IAAIA,KAAK,CAACrB,IAAI,IAAI,EAAE,CAAC;MACzDf,QAAQ,CAACgC,SAAS,EAAEG,UAAe,CAAC;IACtC,CAAC,CAAC;EACJ;;AAvEF3B,OAAA,CAAAC,sBAAA,GAAAA,sBAAA;AA0EA;AACA,MAAa4B,oBAAqB,SAAQ5B,sBAA8B;EACtEd,YACEgB,MAAuB,EACvBN,cAAsB,EACtBxB,SAA6B,EAC7BC,OAA8B;IAE9B,KAAK,CAAC6B,MAAM,EAAEN,cAAc,EAAE,CAACzB,aAAa,CAACC,SAAS,EAAEC,OAAO,CAAC,CAAC,EAAEA,OAAO,CAAC;EAC7E;EACSe,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA0B;IAE1B,KAAK,CAACH,OAAO,CAACC,MAAM,EAAEC,OAAO,EAAE,CAACmC,GAAG,EAAEC,UAAU,KAAI;MACjD,IAAID,GAAG,IAAI,CAACC,UAAU,EAAE,OAAOnC,QAAQ,CAACkC,GAAG,CAAC;MAC5C,OAAOlC,QAAQ,CAACgC,SAAS,EAAEG,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC;EACJ;;AAlBF3B,OAAA,CAAA6B,oBAAA,GAAAA,oBAAA;AAqBA;AACA,MAAaC,oBAAqB,SAAQD,oBAAoB;EAG5D1C,YACES,EAAM,EACNC,cAAsB,EACtBxB,SAA6B,EAC7BC,OAA8B;IAE9B,KAAK,CAACsB,EAAE,EAAEC,cAAc,EAAExB,SAAS,EAAEC,OAAO,CAAC;IAE7C,IAAI,CAACyB,cAAc,GAAGzC,iBAAA,CAAAyE,cAAc,CAACC,OAAO;IAC5C,IAAI,CAACpC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;EAESR,OAAOA,CAACC,MAAc,EAAEC,OAAkC,EAAEC,QAAkB;IACrF,MAAMyC,SAAS,GAAG,IAAI,CAAC7B,OAAO,CAAC,CAAC,CAAC,CAACG,IAAI;IACtC,MAAM2B,MAAM,GAAG,IAAI,CAACtC,EAAE,CAACR,UAAU,CAAC,IAAI,CAACS,cAAc,CAAC,CAACsC,WAAW,CAAC;MAAE5C;IAAO,CAAE,CAAC;IAC/E2C,MAAM,CAACE,OAAO,EAAE,CAACC,IAAI,CACnBjC,OAAO,IAAG;MACRA,OAAO,GAAGnC,KAAK,CAACC,OAAO,CAACkC,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;MACtD,IAAIA,OAAO,CAACkC,IAAI,CAACV,KAAK,IAAIA,KAAK,CAACrB,IAAI,KAAK0B,SAAS,CAAC,EAAE;QACnDzC,QAAQ,CAACgC,SAAS,EAAES,SAAS,CAAC;QAC9B;;MAEF,KAAK,CAAC5C,OAAO,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC;IAC1C,CAAC,EACD+C,KAAK,IAAG;MACN,IAAIA,KAAK,YAAYnF,OAAA,CAAAoF,UAAU,IAAID,KAAK,CAACE,IAAI,KAAKrF,OAAA,CAAAsF,mBAAmB,CAACC,iBAAiB,EAAE;QACvF;QACA,OAAO,KAAK,CAACtD,OAAO,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC;;MAEjD,OAAOA,QAAQ,CAAC+C,KAAK,CAAC;IACxB,CAAC,CACF;EACH;;AApCFvC,OAAA,CAAA8B,oBAAA,GAAAA,oBAAA;AA0CA;AACA,MAAac,kBAAmB,SAAQpF,SAAA,CAAA0C,gBAA0B;EAKhEf,YAAYC,UAAsB,EAAE6C,SAAiB,EAAE3D,OAA4B;IACjF,KAAK,CAACc,UAAU,EAAEd,OAAO,CAAC;IAE1B,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACc,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAAC6C,SAAS,GAAGA,SAAS;EAC5B;EAES5C,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;IAE5B,MAAM2B,GAAG,GAAG;MAAE0B,WAAW,EAAE,IAAI,CAACzD,UAAU,CAACS,cAAc;MAAE+B,KAAK,EAAE,IAAI,CAACK;IAAS,CAAE;IAClF,KAAK,CAACR,cAAc,CAACnC,MAAM,EAAEC,OAAO,EAAE4B,GAAG,EAAE3B,QAAQ,CAAC;EACtD;;AApBFQ,OAAA,CAAA4C,kBAAA,GAAAA,kBAAA;AAuBA;AACA,MAAaE,oBAAqB,SAAQF,kBAAkB;EAC1DzD,YAAYC,UAAsB,EAAEd,OAA2B;IAC7D,KAAK,CAACc,UAAU,EAAE,GAAG,EAAEd,OAAO,CAAC;EACjC;EAESe,OAAOA,CAACC,MAAc,EAAEC,OAAkC,EAAEC,QAAkB;IACrF,KAAK,CAACH,OAAO,CAACC,MAAM,EAAEC,OAAO,EAAEmC,GAAG,IAAG;MACnC,IAAIA,GAAG,EAAE,OAAOlC,QAAQ,CAACkC,GAAG,EAAE,KAAK,CAAC;MACpClC,QAAQ,CAACgC,SAAS,EAAE,IAAI,CAAC;IAC3B,CAAC,CAAC;EACJ;;AAVFxB,OAAA,CAAA8C,oBAAA,GAAAA,oBAAA;AAmBA;AACA,MAAaC,oBAAqB,SAAQvF,SAAA,CAAA0C,gBAA0B;EAWlEf,YAAYC,UAAsB,EAAEd,OAA4B;IAC9D,KAAK,CAACc,UAAU,EAAEd,OAAO,CAAC;IAE1B,IAAI,CAACA,OAAO,GAAG;MAAE,GAAGA;IAAO,CAAE;IAC7B,OAAO,IAAI,CAACA,OAAO,CAAC0E,YAAY;IAChC,IAAI,CAACC,mBAAmB,GAAG7D,UAAU,CAACO,CAAC,CAACuD,SAAS;EACnD;EAES7D,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;IAE5B,MAAMyB,iBAAiB,GAAG,IAAA1D,OAAA,CAAA2D,cAAc,EAAC5B,MAAM,CAAC;IAEhD,MAAM4C,MAAM,GAAG,IAAI,CAAC5D,OAAO,CAAC6E,SAAS,GAAG;MAAEA,SAAS,EAAE,IAAI,CAAC7E,OAAO,CAAC6E;IAAS,CAAE,GAAG,EAAE;IAElF,MAAMC,OAAO,GAAa;MAAEjB,WAAW,EAAE,IAAI,CAACc,mBAAmB,CAAC7D,UAAU;MAAE8C;IAAM,CAAE;IAEtF;IACA;IACA,IAAIjB,iBAAiB,IAAI,CAAC,IAAI,IAAI,CAAC3C,OAAO,CAAC+E,OAAO,KAAK7B,SAAS,EAAE;MAChE4B,OAAO,CAACC,OAAO,GAAG,IAAI,CAAC/E,OAAO,CAAC+E,OAAO;;IAGxC,KAAK,CAAC5B,cAAc,CAACnC,MAAM,EAAEC,OAAO,EAAE6D,OAAO,EAAE5D,QAAQ,CAAC;EAC1D;;AArCFQ,OAAA,CAAA+C,oBAAA,GAAAA,oBAAA;AAwCA;AACA,MAAaO,oBAAqB,SAAQ5F,WAAA,CAAAwB,iBAA0B;EAKlEC,YACEC,UAAsB,EACtBgB,OAA0B,EAC1B9B,OAAgC;IAEhC,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACc,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACgB,OAAO,GAAGA,OAAO;EACxB;EAESf,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA2B;IAE3B,MAAMC,IAAI,GAAG,IAAI,CAACL,UAAU;IAC5B,MAAMgB,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,IAAA3C,kBAAA,CAAAiC,gBAAgB,EACdD,IAAI,CAACE,CAAC,CAACC,EAAE,EACTH,IAAI,CAACI,cAAc,EACnB;MAAE,GAAG,IAAI,CAACvB,OAAO;MAAEyB,cAAc,EAAE,IAAI,CAACA,cAAc;MAAER;IAAO,CAAE,EACjE,CAACmC,GAAG,EAAEhC,gBAAgB,KAAI;MACxB;MACA,IAAIgC,GAAG,IAAI,IAAI,EAAE,OAAOlC,QAAQ,CAACkC,GAAG,CAAC;MACrC;MACA,IAAI,CAACzD,KAAK,CAACC,OAAO,CAACkC,OAAO,CAAC,EAAE,OAAOZ,QAAQ,CAACgC,SAAS,EAAE9B,gBAAgB,CAACU,OAAO,CAAC,IAAI,IAAI,CAAC;MAC1F;MACA,KAAK,IAAImD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnD,OAAO,CAACjC,MAAM,EAAEoF,CAAC,EAAE,EAAE;QACvC,IAAI7D,gBAAgB,CAACU,OAAO,CAACmD,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;UACxC,OAAO/D,QAAQ,CAACgC,SAAS,EAAE,KAAK,CAAC;;;MAIrC;MACA,OAAOhC,QAAQ,CAACgC,SAAS,EAAE,IAAI,CAAC;IAClC,CAAC,CACF;EACH;;AA5CFxB,OAAA,CAAAsD,oBAAA,GAAAA,oBAAA;AA+CA;AACA,MAAaE,yBAA0B,SAAQ9F,WAAA,CAAAwB,iBAA2B;EAKxEC,YAAYS,EAAM,EAAEW,IAAY,EAAEjC,OAAiC;IACjE,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACsB,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACW,IAAI,GAAGA,IAAI;EAClB;EAESlB,OAAOA,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;IAE5B,MAAMI,EAAE,GAAG,IAAI,CAACA,EAAE;IAClB,MAAMW,IAAI,GAAG,IAAI,CAACA,IAAI;IAEtB,IAAA9C,kBAAA,CAAAiC,gBAAgB,EACdE,EAAE,EACFW,IAAI,EACJ;MAAE,GAAG,IAAI,CAACjC,OAAO;MAAEyB,cAAc,EAAE,IAAI,CAACA,cAAc;MAAER;IAAO,CAAE,EACjEC,QAAQ,CACT;EACH;;AA1BFQ,OAAA,CAAAwD,yBAAA,GAAAA,yBAAA;AA6BA,IAAA9F,WAAA,CAAA+F,aAAa,EAACV,oBAAoB,EAAE,CAClCrF,WAAA,CAAAgG,MAAM,CAACC,cAAc,EACrBjG,WAAA,CAAAgG,MAAM,CAACE,SAAS,EAChBlG,WAAA,CAAAgG,MAAM,CAACG,eAAe,CACvB,CAAC;AACF,IAAAnG,WAAA,CAAA+F,aAAa,EAACxD,sBAAsB,EAAE,CAACvC,WAAA,CAAAgG,MAAM,CAACI,eAAe,CAAC,CAAC;AAC/D,IAAApG,WAAA,CAAA+F,aAAa,EAAC5B,oBAAoB,EAAE,CAACnE,WAAA,CAAAgG,MAAM,CAACI,eAAe,CAAC,CAAC;AAC7D,IAAApG,WAAA,CAAA+F,aAAa,EAAC3B,oBAAoB,EAAE,CAACpE,WAAA,CAAAgG,MAAM,CAACI,eAAe,CAAC,CAAC;AAC7D,IAAApG,WAAA,CAAA+F,aAAa,EAACb,kBAAkB,EAAE,CAAClF,WAAA,CAAAgG,MAAM,CAACI,eAAe,CAAC,CAAC;AAC3D,IAAApG,WAAA,CAAA+F,aAAa,EAACX,oBAAoB,EAAE,CAACpF,WAAA,CAAAgG,MAAM,CAACI,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}