{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = require(\"../error\");\nconst write_concern_1 = require(\"../write_concern\");\nconst bulk_write_1 = require(\"./bulk_write\");\nconst command_1 = require(\"./command\");\nconst common_functions_1 = require(\"./common_functions\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n  constructor(ns, documents, options) {\n    super(undefined, options);\n    this.options = {\n      ...options,\n      checkKeys: options.checkKeys ?? false\n    };\n    this.ns = ns;\n    this.documents = documents;\n  }\n  execute(server, session, callback) {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      insert: this.ns.collection,\n      documents: this.documents,\n      ordered\n    };\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n  constructor(collection, doc, options) {\n    super(collection.s.namespace, (0, common_functions_1.prepareDocs)(collection, [doc], options), options);\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      if (err || res == null) return callback(err);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) {\n        // This should be a WriteError but we can't change it now because of error hierarchy\n        return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      }\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        insertedId: this.documents[0]._id\n      });\n    });\n  }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n  constructor(collection, docs, options) {\n    super(options);\n    if (!Array.isArray(docs)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n    }\n    this.options = options;\n    this.collection = collection;\n    this.docs = docs;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    };\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, (0, common_functions_1.prepareDocs)(coll, this.docs, options).map(document => ({\n      insertOne: {\n        document\n      }\n    })), options);\n    bulkWriteOperation.execute(server, session, (err, res) => {\n      if (err || res == null) {\n        if (err && err.message === 'Operation must be an object with an operation key') {\n          err = new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n        }\n        return callback(err);\n      }\n      callback(undefined, {\n        acknowledged: writeConcern?.w !== 0 ?? true,\n        insertedCount: res.insertedCount,\n        insertedIds: res.insertedIds\n      });\n    });\n  }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["error_1","require","write_concern_1","bulk_write_1","command_1","common_functions_1","operation_1","InsertOperation","CommandOperation","constructor","ns","documents","options","undefined","checkKeys","execute","server","session","callback","ordered","command","insert","collection","bypassDocumentValidation","comment","executeCommand","exports","InsertOneOperation","doc","s","namespace","prepareDocs","err","res","code","MongoServerError","writeErrors","acknowledged","writeConcern","w","insertedId","_id","InsertManyOperation","AbstractOperation","docs","Array","isArray","MongoInvalidArgumentError","coll","bsonOptions","readPreference","WriteConcern","fromOptions","bulkWriteOperation","BulkWriteOperation","map","document","insertOne","message","insertedCount","insertedIds","defineAspects","Aspect","RETRYABLE","WRITE_OPERATION"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\operations\\insert.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { BulkWriteOptions } from '../bulk/common';\nimport type { Collection } from '../collection';\nimport { MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { InferIdType } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback, MongoDBNamespace } from '../utils';\nimport { WriteConcern } from '../write_concern';\nimport { BulkWriteOperation } from './bulk_write';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { prepareDocs } from './common_functions';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\n/** @internal */\nexport class InsertOperation extends CommandOperation<Document> {\n  override options: BulkWriteOptions;\n  documents: Document[];\n\n  constructor(ns: MongoDBNamespace, documents: Document[], options: BulkWriteOptions) {\n    super(undefined, options);\n    this.options = { ...options, checkKeys: options.checkKeys ?? false };\n    this.ns = ns;\n    this.documents = documents;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      insert: this.ns.collection,\n      documents: this.documents,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @public */\nexport interface InsertOneOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n}\n\n/** @public */\nexport interface InsertOneResult<TSchema = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The identifier that was inserted. If the server generated the identifier, this value will be null as the driver does not have access to that data */\n  insertedId: InferIdType<TSchema>;\n}\n\nexport class InsertOneOperation extends InsertOperation {\n  constructor(collection: Collection, doc: Document, options: InsertOneOptions) {\n    super(collection.s.namespace, prepareDocs(collection, [doc], options), options);\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<InsertOneResult>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || res == null) return callback(err);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) {\n        // This should be a WriteError but we can't change it now because of error hierarchy\n        return callback(new MongoServerError(res.writeErrors[0]));\n      }\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        insertedId: this.documents[0]._id\n      });\n    });\n  }\n}\n\n/** @public */\nexport interface InsertManyResult<TSchema = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of inserted documents for this operations */\n  insertedCount: number;\n  /** Map of the index of the inserted document to the id of the inserted document */\n  insertedIds: { [key: number]: InferIdType<TSchema> };\n}\n\n/** @internal */\nexport class InsertManyOperation extends AbstractOperation<InsertManyResult> {\n  override options: BulkWriteOptions;\n  collection: Collection;\n  docs: Document[];\n\n  constructor(collection: Collection, docs: Document[], options: BulkWriteOptions) {\n    super(options);\n\n    if (!Array.isArray(docs)) {\n      throw new MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n    }\n\n    this.options = options;\n    this.collection = collection;\n    this.docs = docs;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<InsertManyResult>\n  ): void {\n    const coll = this.collection;\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n    const writeConcern = WriteConcern.fromOptions(options);\n    const bulkWriteOperation = new BulkWriteOperation(\n      coll,\n      prepareDocs(coll, this.docs, options).map(document => ({ insertOne: { document } })),\n      options\n    );\n\n    bulkWriteOperation.execute(server, session, (err, res) => {\n      if (err || res == null) {\n        if (err && err.message === 'Operation must be an object with an operation key') {\n          err = new MongoInvalidArgumentError(\n            'Collection.insertMany() cannot be called with an array that has null/undefined values'\n          );\n        }\n        return callback(err);\n      }\n      callback(undefined, {\n        acknowledged: writeConcern?.w !== 0 ?? true,\n        insertedCount: res.insertedCount,\n        insertedIds: res.insertedIds\n      });\n    });\n  }\n}\n\ndefineAspects(InsertOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION]);\ndefineAspects(InsertOneOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION]);\ndefineAspects(InsertManyOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}