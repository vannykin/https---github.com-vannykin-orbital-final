{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = void 0;\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst connect_1 = require(\"../cmap/connect\");\nconst connection_1 = require(\"../cmap/connection\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  get connection() {\n    return this[kConnection];\n  }\n  constructor(server, options) {\n    super();\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n    });\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options,\n    // force BSON serialization options\n    {\n      raw: false,\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    });\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n  requestCheck() {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n    this[kMonitorId]?.wake();\n  }\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // close monitor\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n  monitor[kRTTPinger]?.close();\n  monitor[kRTTPinger] = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  monitor[kConnection]?.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\nfunction checkServer(monitor, callback) {\n  let start = (0, utils_1.now)();\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n  function failureHandler(err) {\n    monitor[kConnection]?.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err));\n    const error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(err) : err;\n    error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n    if (error instanceof error_1.MongoNetworkTimeoutError) {\n      error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n    }\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err);\n      }\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n      }\n      const rttPinger = monitor[kRTTPinger];\n      const duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello));\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n        start = (0, utils_1.now)();\n      } else {\n        monitor[kRTTPinger]?.close();\n        monitor[kRTTPinger] = undefined;\n        callback(undefined, hello);\n      }\n    });\n    return;\n  }\n  // connecting does an implicit `hello`\n  (0, connect_1.connect)(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n      failureHandler(err);\n      return;\n    }\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello));\n      callback(undefined, conn.hello);\n    }\n  });\n}\nfunction monitorServer(monitor) {\n  return callback => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n      callback();\n    }\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          return done();\n        }\n      }\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        (0, timers_1.setTimeout)(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n      done();\n    });\n  };\n}\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n  close() {\n    this.closed = true;\n    (0, timers_1.clearTimeout)(this[kMonitorId]);\n    this[kConnection]?.destroy({\n      force: true\n    });\n    this[kConnection] = undefined;\n  }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n  if (rttPinger.closed) {\n    return;\n  }\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn?.destroy({\n        force: true\n      });\n      return;\n    }\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n  }\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    (0, connect_1.connect)(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n  connection.command((0, utils_1.ns)('admin.$cmd'), {\n    [constants_1.LEGACY_HELLO_COMMAND]: 1\n  }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n    measureAndReschedule();\n  });\n}\n/**\n * @internal\n */\nclass MonitorInterval {\n  constructor(fn) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.isExpeditedCallToFnScheduled = false;\n    this.stopped = false;\n    this.isExecutionInProgress = false;\n    this.hasExecutedOnce = false;\n    this._executeAndReschedule = () => {\n      if (this.stopped) return;\n      if (this.timerId) {\n        (0, timers_1.clearTimeout)(this.timerId);\n      }\n      this.isExpeditedCallToFnScheduled = false;\n      this.isExecutionInProgress = true;\n      this.fn(() => {\n        this.lastExecutionEnded = (0, utils_1.now)();\n        this.isExecutionInProgress = false;\n        this._reschedule(this.heartbeatFrequencyMS);\n      });\n    };\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n  wake() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n    if (this.isExecutionInProgress) {\n      return;\n    }\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n    this._executeAndReschedule();\n  }\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n      this.timerId = undefined;\n    }\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  toJSON() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n  _reschedule(ms) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n    }\n    this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n}\nexports.MonitorInterval = MonitorInterval;","map":{"version":3,"names":["timers_1","require","bson_1","connect_1","connection_1","constants_1","error_1","mongo_types_1","utils_1","common_1","events_1","server_1","kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kRTTPinger","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","makeStateMachine","STATE_CLOSING","STATE_CLOSED","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","Monitor","TypedEventEmitter","connection","constructor","server","options","undefined","CancellationToken","setMaxListeners","Infinity","address","description","Object","freeze","connectTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","cancellationToken","connectOptions","assign","id","generation","pool","connectionType","Connection","hostAddress","raw","useBigInt64","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connect","MonitorInterval","monitorServer","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","exports","stop","destroy","force","checkServer","callback","start","now","Server","SERVER_HEARTBEAT_STARTED","ServerHeartbeatStartedEvent","failureHandler","err","SERVER_HEARTBEAT_FAILED","ServerHeartbeatFailedEvent","calculateDurationInMs","error","MongoError","addErrorLabel","MongoErrorLabel","ResetPool","MongoNetworkTimeoutError","InterruptInUseConnections","closed","serverApi","helloOk","maxAwaitTimeMS","isAwaitable","cmd","version","LEGACY_HELLO_COMMAND","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","command","ns","hello","isWritablePrimary","rttPinger","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","ServerHeartbeatSucceededEvent","conn","isMonitoringConnection","process","nextTick","done","type","ServerType","Unknown","setTimeout","tv","processId","counter","Long","isLong","fromNumber","measureRoundTripTime","clearTimeout","measureAndReschedule","fn","arguments","length","isExpeditedCallToFnScheduled","stopped","isExecutionInProgress","hasExecutedOnce","_executeAndReschedule","timerId","lastExecutionEnded","_reschedule","currentTime","timeSinceLastCall","toString","JSON","stringify","toJSON","lastCallTime","isExpeditedCheckScheduled","ms"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\sdam\\monitor.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { Document, Long } from '../bson';\nimport { connect } from '../cmap/connect';\nimport { Connection, ConnectionOptions } from '../cmap/connection';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoError, MongoErrorLabel, MongoNetworkTimeoutError } from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Callback } from '../utils';\nimport { calculateDurationInMs, EventEmitterWithState, makeStateMachine, now, ns } from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: MongoError): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<MonitorOptions, 'connectTimeoutMS' | 'heartbeatFrequencyMS' | 'minHeartbeatFrequencyMS'>\n  >;\n  connectOptions: ConnectionOptions;\n  [kServer]: Server;\n  [kConnection]?: Connection;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: MonitorInterval;\n  [kRTTPinger]?: RTTPinger;\n\n  get connection(): Connection | undefined {\n    return this[kConnection];\n  }\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n    });\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign(\n      {\n        id: '<monitor>' as const,\n        generation: server.pool.generation,\n        connectionType: Connection,\n        cancellationToken,\n        hostAddress: server.description.hostAddress\n      },\n      options,\n      // force BSON serialization options\n      {\n        raw: false,\n        useBigInt64: false,\n        promoteLongs: true,\n        promoteValues: true,\n        promoteBuffers: true\n      }\n    );\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor[kRTTPinger]?.close();\n  monitor[kRTTPinger] = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor[kConnection]?.destroy({ force: true });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start = now();\n  monitor.emit(Server.SERVER_HEARTBEAT_STARTED, new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err: Error) {\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n\n    monitor.emit(\n      Server.SERVER_HEARTBEAT_FAILED,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err)\n    );\n\n    const error = !(err instanceof MongoError) ? new MongoError(err) : err;\n    error.addErrorLabel(MongoErrorLabel.ResetPool);\n    if (error instanceof MongoNetworkTimeoutError) {\n      error.addErrorLabel(MongoErrorLabel.InterruptInUseConnections);\n    }\n\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(\n        monitor[kCancellationToken],\n        Object.assign(\n          { heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS },\n          monitor.connectOptions\n        )\n      );\n    }\n\n    connection.command(ns('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration =\n        isAwaitable && rttPinger ? rttPinger.roundTripTime : calculateDurationInMs(start);\n\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, duration, hello)\n      );\n\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(\n          Server.SERVER_HEARTBEAT_STARTED,\n          new ServerHeartbeatStartedEvent(monitor.address)\n        );\n        start = now();\n      } else {\n        monitor[kRTTPinger]?.close();\n        monitor[kRTTPinger] = undefined;\n\n        callback(undefined, hello);\n      }\n    });\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  connect(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n\n      if (isInCloseState(monitor)) {\n        conn.destroy({ force: true });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, calculateDurationInMs(start), conn.hello)\n      );\n\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  /** @internal */\n  [kConnection]?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kRoundTripTime]: number;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  closed: boolean;\n\n  constructor(cancellationToken: CancellationToken, options: RTTPingerOptions) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this[kRoundTripTime];\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this[kConnection]?.destroy({ force: true });\n    this[kConnection] = undefined;\n  }\n}\n\nfunction measureRoundTripTime(rttPinger: RTTPinger, options: RTTPingerOptions) {\n  const start = now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn?: Connection) {\n    if (rttPinger.closed) {\n      conn?.destroy({ force: true });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    connect(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n\n    return;\n  }\n\n  connection.command(ns('admin.$cmd'), { [LEGACY_HELLO_COMMAND]: 1 }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}\n\n/**\n * @internal\n */\nexport interface MonitorIntervalOptions {\n  /** The interval to execute a method on */\n  heartbeatFrequencyMS: number;\n  /** A minimum interval that must elapse before the method is called */\n  minHeartbeatFrequencyMS: number;\n  /** Whether the method should be called immediately when the interval is started  */\n  immediate: boolean;\n}\n\n/**\n * @internal\n */\nexport class MonitorInterval {\n  fn: (callback: Callback) => void;\n  timerId: NodeJS.Timeout | undefined;\n  lastExecutionEnded: number;\n  isExpeditedCallToFnScheduled = false;\n  stopped = false;\n  isExecutionInProgress = false;\n  hasExecutedOnce = false;\n\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n\n  constructor(fn: (callback: Callback) => void, options: Partial<MonitorIntervalOptions> = {}) {\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n\n  wake() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n\n    if (this.isExecutionInProgress) {\n      return;\n    }\n\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n\n    this._executeAndReschedule();\n  }\n\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = undefined;\n    }\n\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  toJSON() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n\n  private _reschedule(ms?: number) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.timerId = setTimeout(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n\n  private _executeAndReschedule = () => {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.isExpeditedCallToFnScheduled = false;\n    this.isExecutionInProgress = true;\n\n    this.fn(() => {\n      this.lastExecutionEnded = now();\n      this.isExecutionInProgress = false;\n      this._reschedule(this.heartbeatFrequencyMS);\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}