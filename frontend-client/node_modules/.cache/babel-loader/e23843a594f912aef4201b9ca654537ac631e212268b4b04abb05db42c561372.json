{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenEntryCache = exports.TokenEntry = void 0;\nconst cache_1 = require(\"./cache\");\n/* 5 minutes in milliseconds */\nconst EXPIRATION_BUFFER_MS = 300000;\n/* Default expiration is now for when no expiration provided */\nconst DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */\nclass TokenEntry {\n  /**\n   * Instantiate the entry.\n   */\n  constructor(tokenResult, serverInfo, expiration) {\n    this.tokenResult = tokenResult;\n    this.serverInfo = serverInfo;\n    this.expiration = expiration;\n  }\n  /**\n   * The entry is still valid if the expiration is more than\n   * 5 minutes from the expiration time.\n   */\n  isValid() {\n    return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n  }\n}\nexports.TokenEntry = TokenEntry;\n/**\n * Cache of OIDC token entries.\n * @internal\n */\nclass TokenEntryCache extends cache_1.Cache {\n  /**\n   * Set an entry in the token cache.\n   */\n  addEntry(address, username, callbackHash, tokenResult, serverInfo) {\n    const entry = new TokenEntry(tokenResult, serverInfo, expirationTime(tokenResult.expiresInSeconds));\n    this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n    return entry;\n  }\n  /**\n   * Delete an entry from the cache.\n   */\n  deleteEntry(address, username, callbackHash) {\n    this.entries.delete(this.cacheKey(address, username, callbackHash));\n  }\n  /**\n   * Get an entry from the cache.\n   */\n  getEntry(address, username, callbackHash) {\n    return this.entries.get(this.cacheKey(address, username, callbackHash));\n  }\n  /**\n   * Delete all expired entries from the cache.\n   */\n  deleteExpiredEntries() {\n    for (const [key, entry] of this.entries) {\n      if (!entry.isValid()) {\n        this.entries.delete(key);\n      }\n    }\n  }\n}\nexports.TokenEntryCache = TokenEntryCache;\n/**\n * Get an expiration time in milliseconds past epoch. Defaults to immediate.\n */\nfunction expirationTime(expiresInSeconds) {\n  return Date.now() + (expiresInSeconds ?? DEFAULT_EXPIRATION_SECS) * 1000;\n}","map":{"version":3,"names":["cache_1","require","EXPIRATION_BUFFER_MS","DEFAULT_EXPIRATION_SECS","TokenEntry","constructor","tokenResult","serverInfo","expiration","isValid","Date","now","exports","TokenEntryCache","Cache","addEntry","address","username","callbackHash","entry","expirationTime","expiresInSeconds","entries","set","cacheKey","deleteEntry","delete","getEntry","get","deleteExpiredEntries","key"],"sources":["C:\\Users\\kin_v\\OneDrive\\Documents\\Orbital\\orbital-code\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc\\token_entry_cache.ts"],"sourcesContent":["import type { IdPServerInfo, IdPServerResponse } from '../mongodb_oidc';\nimport { Cache } from './cache';\n\n/* 5 minutes in milliseconds */\nconst EXPIRATION_BUFFER_MS = 300000;\n/* Default expiration is now for when no expiration provided */\nconst DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */\nexport class TokenEntry {\n  tokenResult: IdPServerResponse;\n  serverInfo: IdPServerInfo;\n  expiration: number;\n\n  /**\n   * Instantiate the entry.\n   */\n  constructor(tokenResult: IdPServerResponse, serverInfo: IdPServerInfo, expiration: number) {\n    this.tokenResult = tokenResult;\n    this.serverInfo = serverInfo;\n    this.expiration = expiration;\n  }\n\n  /**\n   * The entry is still valid if the expiration is more than\n   * 5 minutes from the expiration time.\n   */\n  isValid() {\n    return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n  }\n}\n\n/**\n * Cache of OIDC token entries.\n * @internal\n */\nexport class TokenEntryCache extends Cache<TokenEntry> {\n  /**\n   * Set an entry in the token cache.\n   */\n  addEntry(\n    address: string,\n    username: string,\n    callbackHash: string,\n    tokenResult: IdPServerResponse,\n    serverInfo: IdPServerInfo\n  ): TokenEntry {\n    const entry = new TokenEntry(\n      tokenResult,\n      serverInfo,\n      expirationTime(tokenResult.expiresInSeconds)\n    );\n    this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n    return entry;\n  }\n\n  /**\n   * Delete an entry from the cache.\n   */\n  deleteEntry(address: string, username: string, callbackHash: string): void {\n    this.entries.delete(this.cacheKey(address, username, callbackHash));\n  }\n\n  /**\n   * Get an entry from the cache.\n   */\n  getEntry(address: string, username: string, callbackHash: string): TokenEntry | undefined {\n    return this.entries.get(this.cacheKey(address, username, callbackHash));\n  }\n\n  /**\n   * Delete all expired entries from the cache.\n   */\n  deleteExpiredEntries(): void {\n    for (const [key, entry] of this.entries) {\n      if (!entry.isValid()) {\n        this.entries.delete(key);\n      }\n    }\n  }\n}\n\n/**\n * Get an expiration time in milliseconds past epoch. Defaults to immediate.\n */\nfunction expirationTime(expiresInSeconds?: number): number {\n  return Date.now() + (expiresInSeconds ?? DEFAULT_EXPIRATION_SECS) * 1000;\n}\n"],"mappings":";;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA;AACA,MAAMC,oBAAoB,GAAG,MAAM;AACnC;AACA,MAAMC,uBAAuB,GAAG,CAAC;AACjC;AACA,MAAaC,UAAU;EAKrB;;;EAGAC,YAAYC,WAA8B,EAAEC,UAAyB,EAAEC,UAAkB;IACvF,IAAI,CAACF,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAEA;;;;EAIAC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACD,UAAU,GAAGE,IAAI,CAACC,GAAG,EAAE,GAAGT,oBAAoB;EAC5D;;AApBFU,OAAA,CAAAR,UAAA,GAAAA,UAAA;AAuBA;;;;AAIA,MAAaS,eAAgB,SAAQb,OAAA,CAAAc,KAAiB;EACpD;;;EAGAC,QAAQA,CACNC,OAAe,EACfC,QAAgB,EAChBC,YAAoB,EACpBZ,WAA8B,EAC9BC,UAAyB;IAEzB,MAAMY,KAAK,GAAG,IAAIf,UAAU,CAC1BE,WAAW,EACXC,UAAU,EACVa,cAAc,CAACd,WAAW,CAACe,gBAAgB,CAAC,CAC7C;IACD,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,QAAQ,CAACR,OAAO,EAAEC,QAAQ,EAAEC,YAAY,CAAC,EAAEC,KAAK,CAAC;IACvE,OAAOA,KAAK;EACd;EAEA;;;EAGAM,WAAWA,CAACT,OAAe,EAAEC,QAAgB,EAAEC,YAAoB;IACjE,IAAI,CAACI,OAAO,CAACI,MAAM,CAAC,IAAI,CAACF,QAAQ,CAACR,OAAO,EAAEC,QAAQ,EAAEC,YAAY,CAAC,CAAC;EACrE;EAEA;;;EAGAS,QAAQA,CAACX,OAAe,EAAEC,QAAgB,EAAEC,YAAoB;IAC9D,OAAO,IAAI,CAACI,OAAO,CAACM,GAAG,CAAC,IAAI,CAACJ,QAAQ,CAACR,OAAO,EAAEC,QAAQ,EAAEC,YAAY,CAAC,CAAC;EACzE;EAEA;;;EAGAW,oBAAoBA,CAAA;IAClB,KAAK,MAAM,CAACC,GAAG,EAAEX,KAAK,CAAC,IAAI,IAAI,CAACG,OAAO,EAAE;MACvC,IAAI,CAACH,KAAK,CAACV,OAAO,EAAE,EAAE;QACpB,IAAI,CAACa,OAAO,CAACI,MAAM,CAACI,GAAG,CAAC;;;EAG9B;;AA3CFlB,OAAA,CAAAC,eAAA,GAAAA,eAAA;AA8CA;;;AAGA,SAASO,cAAcA,CAACC,gBAAyB;EAC/C,OAAOX,IAAI,CAACC,GAAG,EAAE,GAAG,CAACU,gBAAgB,IAAIlB,uBAAuB,IAAI,IAAI;AAC1E"},"metadata":{},"sourceType":"script","externalDependencies":[]}